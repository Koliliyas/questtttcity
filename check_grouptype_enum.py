import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_grouptype_enum():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º enum grouptype –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è enum grouptype...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            enum_values = result.fetchall()
            print(f"    –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è enum grouptype: {[row[0] for row in enum_values]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest
            result = await sess.execute(text("""
                SELECT column_name, data_type, udt_name
                FROM information_schema.columns
                WHERE table_name = 'quest' AND column_name = 'group'
            """))
            
            column_info = result.fetchone()
            print(f"    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—è 'group': {column_info}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –≤ enum
            if enum_values:
                has_alone = any('ALONE' in str(row[0]) for row in enum_values)
                print(f"    –ï—Å—Ç—å –ª–∏ 'ALONE' –≤ enum: {has_alone}")

                if not has_alone:
                    print("  ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ enum grouptype!")
                    print("  üí° –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 'ALONE' –≤ enum")
                else:
                    print("  ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ enum grouptype")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º enum grouptype...")
    await check_grouptype_enum()

if __name__ == "__main__":
    asyncio.run(main())

















