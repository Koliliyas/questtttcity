#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity
"""
import psycopg2
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr'
}

def check_point_types():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã —Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É point_type
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã point_type:")
        cursor.execute("""
            SELECT id, name, description
            FROM point_type 
            ORDER BY id
        """)
        point_types = cursor.fetchall()
        
        if point_types:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫: {len(point_types)}")
            for pt in point_types:
                print(f"  - ID: {pt[0]}, Name: {pt[1]}, Description: {pt[2]}")
        else:
            print("‚ùå –¢–∏–ø—ã —Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∏ –µ—Å—Ç—å —Ç–∏–ø—ã —Ç–æ—á–µ–∫)
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã activity:")
        cursor.execute("""
            SELECT id, name, description
            FROM activity 
            ORDER BY id
        """)
        activities = cursor.fetchall()
        
        if activities:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {len(activities)}")
            for act in activities:
                print(f"  - ID: {act[0]}, Name: {act[1]}, Description: {act[2]}")
        else:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∏–ø—ã
        print("\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å —Ç–∏–ø–∞–º–∏:")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE '%type%'
            ORDER BY table_name
        """)
        type_tables = cursor.fetchall()
        
        if type_tables:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å 'type': {len(type_tables)}")
            for table in type_tables:
                print(f"  - {table[0]}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã —Å 'type' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        cursor.close()
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    success = check_point_types()
    
    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã —Ç–æ—á–µ–∫")

if __name__ == "__main__":
    main()

