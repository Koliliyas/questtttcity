import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_migrations():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É alembic_version...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É alembic_version
            result = await sess.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name = 'alembic_version'
            """))
            
            alembic_table = result.fetchone()
            if alembic_table:
                print("    ‚úÖ –¢–∞–±–ª–∏—Ü–∞ alembic_version —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
                result = await sess.execute(text("SELECT version_num FROM alembic_version"))
                current_version = result.fetchone()
                print(f"    üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {current_version[0] if current_version else '–ù–ï–¢'}")
            else:
                print("    ‚ùå –¢–∞–±–ª–∏—Ü–∞ alembic_version –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("    üí° –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏—Å—å!")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è 'group' –≤ —Ç–∞–±–ª–∏—Ü–µ quest...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è group
            result = await sess.execute(text("""
                SELECT column_name, data_type, udt_name, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'quest' AND column_name = 'group'
            """))
            
            column_info = result.fetchone()
            if column_info:
                print(f"    üìã –ü–æ–ª–µ 'group': {column_info}")
                
                if column_info[1] == 'USER-DEFINED':
                    print("    ‚úÖ –ü–æ–ª–µ –∏–º–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø (enum)")
                else:
                    print(f"    ‚ùå –ü–æ–ª–µ –∏–º–µ–µ—Ç —Ç–∏–ø {column_info[1]}, –æ–∂–∏–¥–∞–µ—Ç—Å—è enum")
            else:
                print("    ‚ùå –ü–æ–ª–µ 'group' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ quest")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º enum grouptype...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum grouptype
            result = await sess.execute(text("""
                SELECT typname, typtype
                FROM pg_type
                WHERE typname = 'grouptype'
            """))
            
            enum_type = result.fetchone()
            if enum_type:
                print(f"    ‚úÖ Enum grouptype —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {enum_type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum
                result = await sess.execute(text("""
                    SELECT enumlabel 
                    FROM pg_enum 
                    WHERE enumtypid = (
                        SELECT oid 
                        FROM pg_type 
                        WHERE typname = 'grouptype'
                    )
                    ORDER BY enumsortorder
                """))
                
                enum_values = result.fetchall()
                print(f"    üìã –ó–Ω–∞—á–µ–Ω–∏—è enum: {[row[0] for row in enum_values]}")
                
                if not enum_values:
                    print("    ‚ùå Enum grouptype –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–π!")
                else:
                    print("    ‚úÖ Enum grouptype —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
            else:
                print("    ‚ùå Enum grouptype –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
    await check_migrations()

if __name__ == "__main__":
    asyncio.run(main())

















