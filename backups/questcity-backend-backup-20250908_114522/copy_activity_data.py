import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def copy_activity_data():
    print("üîç –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ activity –∏–∑ questcity –≤ questcity_db...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ questcity
    source_engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity',
        echo=False
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ questcity_db
    target_engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )
    
    source_session = sessionmaker(
        source_engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    target_session = sessionmaker(
        target_engine, 
        class_=AsyncSession, 
        expire_on_commit=False
    )
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã
        async with source_session() as source_sess:
            print("  üîç –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ questcity...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            result = await source_sess.execute(text("""
                SELECT column_name, data_type, is_nullable 
                FROM information_schema.columns 
                WHERE table_name = 'activity' 
                ORDER BY ordinal_position
            """))
            columns = result.fetchall()
            print(f"    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {columns}")
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            result = await source_sess.execute(text("SELECT * FROM activity"))
            all_rows = result.fetchall()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {len(all_rows)}")
            print(f"    –ó–∞–ø–∏—Å–∏: {all_rows}")
            
            if not all_rows:
                print("  ‚ùå –í –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                return
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤—É—é –±–∞–∑—É
            async with target_session() as target_sess:
                print("  üîç –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ questcity_db...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
                result = await target_sess.execute(text("""
                    SELECT COUNT(*) FROM information_schema.tables 
                    WHERE table_name = 'activity' AND table_schema = 'public'
                """))
                table_exists = result.scalar()
                
                if not table_exists:
                    print("  ‚ùå –¢–∞–±–ª–∏—Ü–∞ activity –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ questcity_db!")
                    return
                
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                print("  üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
                await target_sess.execute(text("DELETE FROM activity"))
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                print("  üìã –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
                for row in all_rows:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    insert_sql = f"INSERT INTO activity (id, name) VALUES ({row[0]}, '{row[1]}')"
                    await target_sess.execute(text(insert_sql))
                
                # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await target_sess.commit()
                print("  ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = await target_sess.execute(text("SELECT * FROM activity"))
                copied_rows = result.fetchall()
                print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {len(copied_rows)}")
                print(f"    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {copied_rows}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —Å ID = 1
                result = await target_sess.execute(text("SELECT * FROM activity WHERE id = 1"))
                row_1 = result.fetchone()
                print(f"    –ó–∞–ø–∏—Å—å —Å ID = 1: {row_1}")
                
                if row_1:
                    print("  ‚úÖ –ó–∞–ø–∏—Å—å activity —Å ID = 1 —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!")
                else:
                    print("  ‚ùå –ó–∞–ø–∏—Å—å activity —Å ID = 1 –ù–ï —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!")
                    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ activity...")
    await copy_activity_data()

if __name__ == "__main__":
    asyncio.run(main())
