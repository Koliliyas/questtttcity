#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–∞ —Å ID 77 –∏ –µ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def check_quest_77():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç —Å ID 77 –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç —Å ID 77 –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {database_host}:{database_port}/{database_name}")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(database_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç
        quest_query = """
        SELECT id, name, description, image, category_id, level, timeframe, 
               "group", cost, reward, pay_extra, is_subscription, vehicle_id,
               mentor_preference, auto_accrual, milage, place_id
        FROM quest 
        WHERE id = 77
        """
        
        quest_result = await conn.fetchrow(quest_query)
        
        if quest_result is None:
            print("‚ùå –ö–≤–µ—Å—Ç —Å ID 77 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ Quest ID: {quest_result['id']}")
        print(f"‚úÖ Quest Name: {quest_result['name']}")
        print(f"‚úÖ Quest Description: {quest_result['description']}")
        print(f"‚úÖ Quest Image: {quest_result['image']}")
        print(f"‚úÖ Quest Mentor Preference: {quest_result['mentor_preference']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        name = quest_result['name'] or ""
        description = quest_result['description'] or ""
        mentor_preference = quest_result['mentor_preference'] or ""
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:")
        print(f"  - Name length: {len(name)}")
        print(f"  - Description length: {len(description)}")
        print(f"  - Mentor preference length: {len(mentor_preference)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        problematic_patterns = [
            '–†–Ü–†–Ü–†¬µ–°–Ç–†–Ü–†–Ü–†¬µ–°–Ç–†¬∞',
            '–†–Ü–†–Ü–†¬µ–°–Ç–†–Ü–†–Ü–†¬µ–°–Ç–†¬∞',
            '–†–Ü–†–Ü–†¬µ–°–Ç–†–Ü–†–Ü–†¬µ–°–Ç–†¬∞',
            '–°–É–†¬µ–°–Ç–†–Ü–†–Ü–†¬µ–°–Ç–†¬∞',
            '–†–Ü–†–Ü–†¬µ–°–Ç–†–Ü–†–Ü–†¬µ–°–Ç–†¬∞'
        ]
        
        has_encoding_issues = False
        for pattern in problematic_patterns:
            if pattern in name or pattern in description or pattern in mentor_preference:
                print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {pattern}")
                has_encoding_issues = True
        
        if has_encoding_issues:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π!")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
            print("\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏:")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É Windows-1251 -> UTF-8
                fixed_name = name.encode('latin1').decode('utf-8', errors='ignore')
                fixed_description = description.encode('latin1').decode('utf-8', errors='ignore')
                fixed_mentor = mentor_preference.encode('latin1').decode('utf-8', errors='ignore')
                
                print(f"  - Fixed name: {fixed_name}")
                print(f"  - Fixed description: {fixed_description}")
                print(f"  - Fixed mentor preference: {fixed_mentor}")
                
            except Exception as e:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É: {e}")
        else:
            print("  ‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        # –¢–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞
        points_query = """
        SELECT id, name_of_location, description, "order", type_id, tool_id, 
               file, is_divide, quest_id
        FROM point 
        WHERE quest_id = 77
        ORDER BY "order"
        """
        
        points_result = await conn.fetch(points_query)
        print(f"  - Points count: {len(points_result)}")
        
        for i, point in enumerate(points_result):
            point_name = point['name_of_location'] or ""
            point_desc = point['description'] or ""
            
            print(f"    Point {i+1}: {point_name}")
            if any(pattern in point_name or pattern in point_desc for pattern in problematic_patterns):
                print(f"      ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Ç–æ—á–∫–µ {i+1}")
        
        # –ú–µ—Ä—á
        merch_query = """
        SELECT id, name, description, image, quest_id
        FROM merch 
        WHERE quest_id = 77
        """
        
        merch_result = await conn.fetch(merch_query)
        print(f"  - Merch count: {len(merch_result)}")
        
        # –û—Ç–∑—ã–≤—ã
        reviews_query = """
        SELECT id, text, quest_id
        FROM review 
        WHERE quest_id = 77
        """
        
        reviews_result = await conn.fetch(reviews_query)
        print(f"  - Reviews count: {len(reviews_result)}")
        
        await conn.close()
        
        print("\n" + "=" * 60)
        if has_encoding_issues:
            print("‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–≤–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
            print("   –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç —á–µ—Ä–µ–∑ SQL –Ω–∞–ø—Ä—è–º—É—é")
        else:
            print("‚úÖ –ö–≤–µ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    asyncio.run(check_quest_77())
