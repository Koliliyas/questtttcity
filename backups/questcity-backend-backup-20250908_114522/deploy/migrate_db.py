#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä Timeweb Cloud
"""

import os
import subprocess
import sys
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–∏–∑ .env.backup)
LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'port': '5432',
    'user': 'postgres',
    'password': 'postgres',
    'database': 'questcity_db'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î (Timeweb Cloud)
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': '5432',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'database': 'default_db',
    'sslmode': 'verify-full'
}

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def create_backup_filename():
    """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"db_backup_{timestamp}.sql"

def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pg_dump
    if not run_command("pg_dump --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ pg_dump"):
        print("‚ùå pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client tools.")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
    backup_file = create_backup_filename()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    local_connection = f"postgresql://{LOCAL_DB_CONFIG['user']}:{LOCAL_DB_CONFIG['password']}@{LOCAL_DB_CONFIG['host']}:{LOCAL_DB_CONFIG['port']}/{LOCAL_DB_CONFIG['database']}"
    
    server_connection = f"postgresql://{SERVER_DB_CONFIG['user']}:{SERVER_DB_CONFIG['password']}@{SERVER_DB_CONFIG['host']}:{SERVER_DB_CONFIG['port']}/{SERVER_DB_CONFIG['database']}?sslmode={SERVER_DB_CONFIG['sslmode']}"
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    dump_command = f"pg_dump '{local_connection}' > {backup_file}"
    if not run_command(dump_command, "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"):
        return False
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = Path(backup_file).stat().st_size
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: {file_size / 1024 / 1024:.2f} MB")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    upload_command = f"scp {backup_file} root@176.98.177.16:/opt/questcity/questcity-backend/"
    if not run_command(upload_command, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
        return False
    
    # –®–∞–≥ 4: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    import_command = f"ssh root@176.98.177.16 'cd /opt/questcity/questcity-backend && psql \"{server_connection}\" < {backup_file}'"
    if not run_command(import_command, "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
        return False
    
    # –®–∞–≥ 5: –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cleanup_local = f"rm {backup_file}"
    cleanup_server = f"ssh root@176.98.177.16 'cd /opt/questcity/questcity-backend && rm {backup_file}'"
    
    run_command(cleanup_local, "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    run_command(cleanup_server, "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    
    print("\nüéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 60)
    return True

def interactive_setup():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL –ë–î:")
    
    config = {}
    config['host'] = input("–•–æ—Å—Ç (localhost): ").strip() or 'localhost'
    config['port'] = input("–ü–æ—Ä—Ç (5432): ").strip() or '5432'
    config['user'] = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ").strip()
    config['password'] = input("–ü–∞—Ä–æ–ª—å: ").strip()
    config['database'] = input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ").strip()
    
    if not all([config['user'], config['password'], config['database']]):
        print("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        return None
    
    return config

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--setup":
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        new_config = interactive_setup()
        if new_config:
            print("\nüìù –û–±–Ω–æ–≤–∏—Ç–µ LOCAL_DB_CONFIG –≤ —Å–∫—Ä–∏–ø—Ç–µ:")
            for key, value in new_config.items():
                print(f"    '{key}': '{value}',")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if LOCAL_DB_CONFIG['user'] == 'your_local_user':
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î!")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python migrate_db.py --setup")
            sys.exit(1)
        
        success = main()
        sys.exit(0 if success else 1)
