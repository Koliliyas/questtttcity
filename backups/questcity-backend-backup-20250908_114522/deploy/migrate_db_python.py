#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä Timeweb Cloud
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Python –≤–º–µ—Å—Ç–æ pg_dump
"""

import asyncio
import asyncpg
import subprocess
import sys
from pathlib import Path
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–∏–∑ .env.backup)
LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'user': 'postgres',
    'password': 'postgres',
    'database': 'questcity_db'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î (Timeweb Cloud)
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'database': 'default_db',
    'sslmode': 'verify-full'
}

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def create_backup_filename():
    """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"db_backup_{timestamp}.sql"

async def export_database():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è Python"""
    print("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Python...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        conn = await asyncpg.connect(
            host=LOCAL_DB_CONFIG['host'],
            port=LOCAL_DB_CONFIG['port'],
            user=LOCAL_DB_CONFIG['user'],
            password=LOCAL_DB_CONFIG['password'],
            database=LOCAL_DB_CONFIG['database']
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT tablename 
            FROM pg_tables 
            WHERE schemaname = 'public' 
            ORDER BY tablename
        """)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –±—ç–∫–∞–ø–∞
        backup_file = create_backup_filename()
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("-- QuestCity Database Backup\n")
            f.write(f"-- Created: {datetime.now()}\n")
            f.write("-- Database: " + LOCAL_DB_CONFIG['database'] + "\n\n")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            for table in tables:
                table_name = table['tablename']
                print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                structure = await conn.fetch(f"""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = $1 
                    ORDER BY ordinal_position
                """, table_name)
                
                # –°–æ–∑–¥–∞–µ–º CREATE TABLE
                f.write(f"\n-- Table: {table_name}\n")
                f.write(f"DROP TABLE IF EXISTS {table_name} CASCADE;\n")
                f.write(f"CREATE TABLE {table_name} (\n")
                
                columns = []
                for col in structure:
                    col_def = f"    {col['column_name']} {col['data_type']}"
                    if col['is_nullable'] == 'NO':
                        col_def += " NOT NULL"
                    if col['column_default']:
                        col_def += f" DEFAULT {col['column_default']}"
                    columns.append(col_def)
                
                f.write(",\n".join(columns))
                f.write("\n);\n\n")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = await conn.fetch(f"SELECT * FROM {table_name}")
                if data:
                    f.write(f"-- Data for table {table_name}\n")
                    for row in data:
                        values = []
                        for value in row.values():
                            if value is None:
                                values.append("NULL")
                            elif isinstance(value, str):
                                escaped_value = value.replace("'", "''")
                                values.append(f"'{escaped_value}'")
                            else:
                                values.append(str(value))
                        f.write(f"INSERT INTO {table_name} VALUES ({', '.join(values)});\n")
                    f.write("\n")
        
        await conn.close()
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {backup_file}")
        return backup_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return None

async def import_database(backup_file):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ë–î"""
    print(f"üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ë–î...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î
        conn = await asyncpg.connect(
            host=SERVER_DB_CONFIG['host'],
            port=SERVER_DB_CONFIG['port'],
            user=SERVER_DB_CONFIG['user'],
            password=SERVER_DB_CONFIG['password'],
            database=SERVER_DB_CONFIG['database'],
            ssl='require'
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        with open(backup_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = content.split(';')
        
        for i, command in enumerate(commands):
            command = command.strip()
            if command and not command.startswith('--'):
                try:
                    await conn.execute(command)
                    if i % 10 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∫–æ–º–∞–Ω–¥
                        print(f"üì• –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {i+1}/{len(commands)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {i+1}: {e}")
                    print(f"–ö–æ–º–∞–Ω–¥–∞: {command[:100]}...")
        
        await conn.close()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä (Python)")
    print("=" * 70)
    
    # –®–∞–≥ 1: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    backup_file = await export_database()
    if not backup_file:
        return False
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = Path(backup_file).stat().st_size
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: {file_size / 1024 / 1024:.2f} MB")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    upload_command = f"scp {backup_file} root@176.98.177.16:/opt/questcity/questcity-backend/"
    if not run_command(upload_command, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
        return False
    
    # –®–∞–≥ 4: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    print("üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    import_command = f"ssh root@176.98.177.16 'cd /opt/questcity/questcity-backend && python3 -c \"import asyncio; from migrate_db_python import import_database; asyncio.run(import_database(\\\"{backup_file}\\\"))\"'"
    
    # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    copy_script = f"scp migrate_db_python.py root@176.98.177.16:/opt/questcity/questcity-backend/"
    if not run_command(copy_script, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
        return False
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    if not run_command(import_command, "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"):
        return False
    
    # –®–∞–≥ 5: –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cleanup_local = f"rm {backup_file}"
    cleanup_server = f"ssh root@176.98.177.16 'cd /opt/questcity/questcity-backend && rm {backup_file} migrate_db_python.py'"
    
    run_command(cleanup_local, "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    run_command(cleanup_server, "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    
    print("\nüéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 70)
    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü–µ—Ä–µ–Ω–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
