#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö QuestCity Backend.

–°–æ–∑–¥–∞–µ—Ç:
- –ë–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (activity)
- –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (tool) 
- –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (vehicle)
- –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ (category)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/create_base_data.py [--force] [--dry-run]

–û–ø—Ü–∏–∏:
    --force     –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    --dry-run   –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import argparse
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.engine import async_session_factory
from db.models.quest.point import Activity, Tool
from db.models.quest.quest import Place, Vehicle, Category
from logger import logger

# –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
BASE_ACTIVITIES = [
    "Face verification",
    "Photo taking", 
    "QR code scanning",
    "GPS location check",
    "Text input",
    "Audio recording",
    "Video recording",
    "Object detection",
    "Gesture recognition",
    "Document scan"
]

BASE_TOOLS = [
    {"name": "Smartphone", "image": "https://example.com/smartphone.png"},
    {"name": "Camera", "image": "https://example.com/camera.png"},
    {"name": "QR Scanner", "image": "https://example.com/qr_scanner.png"},
    {"name": "GPS Tracker", "image": "https://example.com/gps.png"},
    {"name": "Voice Recorder", "image": "https://example.com/recorder.png"},
    {"name": "Compass", "image": "https://example.com/compass.png"},
    {"name": "Measuring Tape", "image": "https://example.com/tape.png"},
    {"name": "Flashlight", "image": "https://example.com/flashlight.png"},
    {"name": "Binoculars", "image": "https://example.com/binoculars.png"},
    {"name": "Notebook", "image": "https://example.com/notebook.png"}
]

BASE_VEHICLES = [
    "Walking",
    "Bicycle", 
    "Car",
    "Public Transport",
    "Motorcycle",
    "Scooter",
    "Boat",
    "Train",
    "Bus",
    "Metro"
]

BASE_PLACES = [
    "–ú–æ—Å–∫–≤–∞",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 
    "–ö–∞–∑–∞–Ω—å",
    "–°–æ—á–∏",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    "–°–∞–º–∞—Ä–∞",
    "–£—Ñ–∞",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
]

BASE_CATEGORIES = [
    {"name": "Adventure", "image": "https://example.com/adventure.png"},
    {"name": "Culture", "image": "https://example.com/culture.png"},
    {"name": "Sport", "image": "https://example.com/sport.png"},
    {"name": "Education", "image": "https://example.com/education.png"},
    {"name": "Entertainment", "image": "https://example.com/entertainment.png"},
    {"name": "Business", "image": "https://example.com/business.png"},
    {"name": "Travel", "image": "https://example.com/travel.png"},
    {"name": "Technology", "image": "https://example.com/technology.png"},
    {"name": "Nature", "image": "https://example.com/nature.png"},
    {"name": "Social", "image": "https://example.com/social.png"}
]


class BaseDataCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self, session: AsyncSession, force: bool = False, dry_run: bool = False):
        self.session = session
        self.force = force
        self.dry_run = dry_run
        self.created_count = 0
        self.skipped_count = 0

    async def create_activities(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."""
        logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
        
        existing = await self.session.execute(select(Activity.name))
        existing_names = {row[0] for row in existing.fetchall()}
        
        for activity_name in BASE_ACTIVITIES:
            if activity_name in existing_names and not self.force:
                logger.debug(f"‚è≠Ô∏è  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.skipped_count += 1
                continue
                
            if self.dry_run:
                logger.info(f"üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_name}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –µ—Å–ª–∏ force=True
            if activity_name in existing_names and self.force:
                existing_activity = await self.session.execute(
                    select(Activity).where(Activity.name == activity_name)
                )
                activity_to_delete = existing_activity.scalar_one_or_none()
                if activity_to_delete:
                    await self.session.delete(activity_to_delete)
                    logger.debug(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_name}")
            
            activity = Activity(name=activity_name)
            self.session.add(activity)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_name}")
            self.created_count += 1

    async def create_tools(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        existing = await self.session.execute(select(Tool.name))
        existing_names = {row[0] for row in existing.fetchall()}
        
        for tool_data in BASE_TOOLS:
            tool_name = tool_data["name"]
            
            if tool_name in existing_names and not self.force:
                logger.debug(f"‚è≠Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.skipped_count += 1
                continue
                
            if self.dry_run:
                logger.info(f"üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –µ—Å–ª–∏ force=True
            if tool_name in existing_names and self.force:
                existing_tool = await self.session.execute(
                    select(Tool).where(Tool.name == tool_name)
                )
                tool_to_delete = existing_tool.scalar_one_or_none()
                if tool_to_delete:
                    await self.session.delete(tool_to_delete)
                    logger.debug(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            
            tool = Tool(name=tool_name, image=tool_data["image"])
            self.session.add(tool)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            self.created_count += 1

    async def create_vehicles(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤."""
        logger.info("üöó –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...")
        
        existing = await self.session.execute(select(Vehicle.name))
        existing_names = {row[0] for row in existing.fetchall()}
        
        for vehicle_name in BASE_VEHICLES:
            if vehicle_name in existing_names and not self.force:
                logger.debug(f"‚è≠Ô∏è  –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç '{vehicle_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.skipped_count += 1
                continue
                
            if self.dry_run:
                logger.info(f"üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_name}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –µ—Å–ª–∏ force=True
            if vehicle_name in existing_names and self.force:
                existing_vehicle = await self.session.execute(
                    select(Vehicle).where(Vehicle.name == vehicle_name)
                )
                vehicle_to_delete = existing_vehicle.scalar_one_or_none()
                if vehicle_to_delete:
                    await self.session.delete(vehicle_to_delete)
                    logger.debug(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_name}")
            
            vehicle = Vehicle(name=vehicle_name)
            self.session.add(vehicle)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_name}")
            self.created_count += 1

    async def create_places(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Å—Ç."""
        logger.info("üìç –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Å—Ç...")
        
        existing = await self.session.execute(select(Place.name))
        existing_names = {row[0] for row in existing.fetchall()}
        
        for place_name in BASE_PLACES:
            if place_name in existing_names and not self.force:
                logger.debug(f"‚è≠Ô∏è  –ú–µ—Å—Ç–æ '{place_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.skipped_count += 1
                continue
                
            if self.dry_run:
                logger.info(f"üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω–æ –º–µ—Å—Ç–æ: {place_name}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –µ—Å–ª–∏ force=True
            if place_name in existing_names and self.force:
                existing_place = await self.session.execute(
                    select(Place).where(Place.name == place_name)
                )
                place_to_delete = existing_place.scalar_one_or_none()
                if place_to_delete:
                    await self.session.delete(place_to_delete)
                    logger.debug(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ: {place_name}")
            
            place = Place(name=place_name)
            self.session.add(place)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–µ—Å—Ç–æ: {place_name}")
            self.created_count += 1

    async def create_categories(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        logger.info("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        existing = await self.session.execute(select(Category.name))
        existing_names = {row[0] for row in existing.fetchall()}
        
        for category_data in BASE_CATEGORIES:
            category_name = category_data["name"]
            
            if category_name in existing_names and not self.force:
                logger.debug(f"‚è≠Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.skipped_count += 1
                continue
                
            if self.dry_run:
                logger.info(f"üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –µ—Å–ª–∏ force=True
            if category_name in existing_names and self.force:
                existing_category = await self.session.execute(
                    select(Category).where(Category.name == category_name)
                )
                category_to_delete = existing_category.scalar_one_or_none()
                if category_to_delete:
                    await self.session.delete(category_to_delete)
                    logger.debug(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
            
            category = Category(name=category_name, image=category_data["image"])
            self.session.add(category)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
            self.created_count += 1

    async def create_all(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            await self.create_activities()
            await self.create_tools()
            await self.create_vehicles()
            await self.create_places()
            await self.create_categories()
            
            if not self.dry_run:
                await self.session.commit()
                logger.info("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                logger.info("üîç [DRY-RUN] –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
        except Exception as e:
            if not self.dry_run:
                await self.session.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                raise
            else:
                logger.error(f"‚ùå [DRY-RUN] –û—à–∏–±–∫–∞: {e}")
                raise

        logger.info(f"üìä –ò—Ç–æ–≥–∏: —Å–æ–∑–¥–∞–Ω–æ {self.created_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {self.skipped_count}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--force", action="store_true", 
                       help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
    parser.add_argument("--dry-run", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    args = parser.parse_args()
    
    logger.info("üîß QuestCity Backend - –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    if args.dry_run:
        logger.info("üîç –†–µ–∂–∏–º DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    if args.force:
        logger.info("‚ö†Ô∏è  –†–µ–∂–∏–º FORCE: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã")
    
    try:
        async with async_session_factory() as session:
            creator = BaseDataCreator(session, force=args.force, dry_run=args.dry_run)
            await creator.create_all()
            
        logger.info("üéâ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 