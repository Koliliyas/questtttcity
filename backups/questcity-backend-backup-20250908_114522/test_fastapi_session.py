import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, text

async def test_fastapi_session():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤ FastAPI...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–ê–ö–£–Æ –ñ–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ FastAPI
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost:5432/questcity',
            echo=True,
            pool_size=20,
            max_overflow=30,
            pool_timeout=30,
            pool_recycle=3600,
            pool_pre_ping=True,
            connect_args={
                "command_timeout": 60,
                "server_settings": {
                    "application_name": "questcity_backend",
                },
            }
        )
        
        async_session_factory = async_sessionmaker(
            bind=engine,
            expire_on_commit=False
        )
        
        print("  ‚úÖ Engine –∏ session_factory —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –≤ FastAPI
        async with async_session_factory() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ session_factory")
            
            # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
            print("  üîç –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å...")
            result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
            row = result.fetchone()
            print(f"    SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {row}")
            
            # –¢–µ—Å—Ç 2: SQLAlchemy select
            print("  üîç –¢–µ—Å—Ç 2: SQLAlchemy select...")
            from src.db.models.quest.point import Activity
            stmt = select(Activity).where(Activity.id == 1)
            result = await session.execute(stmt)
            activity = result.scalar_one_or_none()
            print(f"    Select —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity}")
            
            # –¢–µ—Å—Ç 3: session.get() (–∫–∞–∫ –≤ TypeRepository)
            print("  üîç –¢–µ—Å—Ç 3: session.get()...")
            try:
                activity_get = await session.get(Activity, 1)
                print(f"    Get —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity_get}")
            except Exception as e:
                print(f"    Get –æ—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            print("  üîç –¢–µ—Å—Ç 4: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
            print(f"    –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {session.is_active}")
            print(f"    –°–µ—Å—Å–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {session.in_transaction()}")
            
            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            print("  üîç –¢–µ—Å—Ç 5: –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ activity...")
            result = await session.execute(text("SELECT COUNT(*) FROM activity"))
            count = result.scalar()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤ FastAPI...")
    await test_fastapi_session()

if __name__ == "__main__":
    asyncio.run(main())
