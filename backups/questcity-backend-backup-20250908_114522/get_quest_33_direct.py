#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–µ—Å—Ç–µ test66 (ID 33)
"""

import asyncio
import os
from sqlalchemy import create_engine, text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "postgresql+asyncpg://postgres:postgres@localhost:5432/questcity_db"

async def get_quest_data():
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–µ—Å—Ç–µ ID 33 –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã"""
    
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    engine = create_async_engine(DATABASE_URL, echo=True)
    
    async with engine.begin() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞
        quest_query = text("""
            SELECT 
                q.id,
                q.name,
                q.description,
                q.image,
                q.mentor_preference,
                q.auto_accrual,
                q.cost,
                q.reward,
                q.category_id,
                q.vehicle_id,
                q.place_id,
                q.created_at,
                q.updated_at
            FROM quest q
            WHERE q.id = 33
        """)
        
        quest_result = await conn.execute(quest_query)
        quest_data = quest_result.fetchone()
        
        if not quest_data:
            print("‚ùå –ö–≤–µ—Å—Ç —Å ID 33 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print("üîç –î–ê–ù–ù–´–ï –ö–í–ï–°–¢–ê:")
        print(f"ID: {quest_data.id}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {quest_data.name}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {quest_data.description}")
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {quest_data.image}")
        print(f"Mentor Preference: {quest_data.mentor_preference}")
        print(f"Auto Accrual: {quest_data.auto_accrual}")
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {quest_data.cost}")
        print(f"–ù–∞–≥—Ä–∞–¥–∞: {quest_data.reward}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {quest_data.category_id}")
        print(f"–¢–° ID: {quest_data.vehicle_id}")
        print(f"–ú–µ—Å—Ç–æ ID: {quest_data.place_id}")
        print(f"–°–æ–∑–¥–∞–Ω: {quest_data.created_at}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω: {quest_data.updated_at}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞
        points_query = text("""
            SELECT 
                p.id,
                p.quest_id,
                p.name_of_location,
                p.description,
                p.order,
                p.type_id,
                p.tool_id,
                p.file,
                p.is_divide
            FROM point p
            WHERE p.quest_id = 33
            ORDER BY p.order
        """)
        
        points_result = await conn.execute(points_query)
        points_data = points_result.fetchall()
        
        print(f"\nüîç –¢–û–ß–ö–ò –ö–í–ï–°–¢–ê (–Ω–∞–π–¥–µ–Ω–æ: {len(points_data)}):")
        for i, point in enumerate(points_data):
            print(f"\n--- –¢–æ—á–∫–∞ {i+1} ---")
            print(f"ID —Ç–æ—á–∫–∏: {point.id}")
            print(f"Quest ID: {point.quest_id}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {point.name_of_location}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {point.description}")
            print(f"–ü–æ—Ä—è–¥–æ–∫: {point.order}")
            print(f"–¢–∏–ø ID: {point.type_id}")
            print(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ID: {point.tool_id}")
            print(f"–§–∞–π–ª: {point.file}")
            print(f"–†–∞–∑–¥–µ–ª–∏—Ç—å: {point.is_divide}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
            places_query = text("""
                SELECT 
                    ps.id,
                    ps.point_id,
                    ps.longitude,
                    ps.latitude,
                    ps.detections_radius,
                    ps.height,
                    ps.interaction_inaccuracy,
                    ps.part,
                    ps.random_occurrence
                FROM place_settings ps
                WHERE ps.point_id = :point_id
                ORDER BY ps.part
            """)
            
            places_result = await conn.execute(places_query, {"point_id": point.id})
            places_data = places_result.fetchall()
            
            print(f"  –ú–µ—Å—Ç–∞ (–Ω–∞–π–¥–µ–Ω–æ: {len(places_data)}):")
            for j, place in enumerate(places_data):
                print(f"    --- –ú–µ—Å—Ç–æ {j+1} ---")
                print(f"    ID –º–µ—Å—Ç–∞: {place.id}")
                print(f"    Point ID: {place.point_id}")
                print(f"    –î–æ–ª–≥–æ—Ç–∞: {place.longitude}")
                print(f"    –®–∏—Ä–æ—Ç–∞: {place.latitude}")
                print(f"    –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {place.detections_radius}")
                print(f"    –í—ã—Å–æ—Ç–∞: {place.height}")
                print(f"    –ù–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {place.interaction_inaccuracy}")
                print(f"    –ß–∞—Å—Ç—å: {place.part}")
                print(f"    –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {place.random_occurrence}")
    
    await engine.dispose()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    asyncio.run(get_quest_data())
    print("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
