"""
–¢–µ—Å—Ç—ã error scenarios –∏ edge cases –¥–ª—è API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∫–≤–µ—Å—Ç–æ–≤.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
- –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
- –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
- Rate limiting (–µ—Å–ª–∏ –µ—Å—Ç—å)
"""
import pytest
import requests
from typing import Dict, Any


class TestAuthorizationErrors:
    """–¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    
    def test_create_activity_without_auth(self, api_base_url, sample_activity_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        response = requests.post(
            f"{api_base_url}/quests/types/",
            json=sample_activity_data
        )
        
        assert response.status_code == 401  # Unauthorized
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
    
    def test_create_tool_with_invalid_token(self, api_base_url, sample_tool_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º."""
        invalid_headers = {
            "Authorization": "Bearer invalid_token",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            f"{api_base_url}/quests/tools/",
            json=sample_tool_data,
            headers=invalid_headers
        )
        
        assert response.status_code == 401  # Unauthorized
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
    
    def test_get_categories_without_auth(self, api_base_url):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        response = requests.get(f"{api_base_url}/quests/categories/")
        
        assert response.status_code == 401  # Unauthorized
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")


class TestDataValidationErrors:
    """–¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    def test_create_activity_with_special_characters(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        special_chars_data = {"name": "Activity!@#$%^&*()"}
        
        response = api_client.post("/quests/types/", json=special_chars_data)
        
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —É—Å–ø–µ—Ö (–µ—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã), –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω
        assert response.status_code in [201, 409, 422]
        print(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {response.status_code}")
    
    def test_create_tool_with_invalid_base64(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º base64."""
        invalid_base64_data = {
            "name": "Tool Invalid Image",
            "image": "invalid_base64_string"
        }
        
        response = api_client.post("/quests/tools/", json=invalid_base64_data)
        
        # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        assert response.status_code == 422
        print("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π base64 –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
    
    def test_create_vehicle_with_null_name(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å null –∏–º–µ–Ω–µ–º."""
        null_name_data = {"name": None}
        
        response = api_client.post("/quests/vehicles/", json=null_name_data)
        
        assert response.status_code == 422  # Validation error
        print("‚úÖ Null –∏–º—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
    
    def test_create_category_with_missing_fields(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏."""
        # –ü—É—Å—Ç–æ–π JSON
        response = api_client.post("/quests/categories/", json={})
        
        assert response.status_code == 422  # Validation error
        print("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è")
    
    def test_create_activity_with_unicode(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏."""
        unicode_data = {"name": "Ê¥ªÂä®ÊµãËØï üéØ —Ç–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"}
        
        response = api_client.post("/quests/types/", json=unicode_data)
        
        # Unicode –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
        assert response.status_code in [201, 409]  # –£—Å–ø–µ—Ö –∏–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        if response.status_code == 201:
            data = response.json()
            assert data["name"] == unicode_data["name"]
            print("‚úÖ Unicode —Å–∏–º–≤–æ–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        else:
            print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å Unicode —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


class TestBoundaryConditions:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π."""
    
    def test_create_activity_min_length_name(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –∏–º–µ–Ω–∏."""
        min_length_data = {"name": "AB"}  # 2 —Å–∏–º–≤–æ–ª–∞ - –º–∏–Ω–∏–º—É–º
        
        response = api_client.post("/quests/types/", json=min_length_data)
        
        assert response.status_code in [201, 409]  # –£—Å–ø–µ—Ö –∏–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_create_tool_max_length_name(self, api_client, test_base64_image):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –∏–º–µ–Ω–∏."""
        max_length_data = {
            "name": "A" * 128,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–∑ —Å—Ö–µ–º—ã
            "image": test_base64_image
        }
        
        response = api_client.post("/quests/tools/", json=max_length_data)
        
        assert response.status_code in [201, 409]  # –£—Å–ø–µ—Ö –∏–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_create_vehicle_exactly_max_plus_one(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–º–µ–Ω–µ–º –Ω–∞ 1 —Å–∏–º–≤–æ–ª –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞."""
        over_max_data = {"name": "A" * 129}  # –ù–∞ 1 –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
        
        response = api_client.post("/quests/vehicles/", json=over_max_data)
        
        assert response.status_code == 422  # Validation error
        print("‚úÖ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
    
    def test_create_category_with_very_large_image(self, api_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—É—é base64 —Å—Ç—Ä–æ–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞)
        large_base64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" * 1000
        
        large_image_data = {
            "name": "Category Large Image",
            "image": large_base64
        }
        
        response = api_client.post("/quests/categories/", json=large_image_data)
        
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ —É—Å–ø–µ—Ö
        assert response.status_code in [201, 413, 422]  # –£—Å–ø–µ—Ö, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        print(f"‚úÖ –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {response.status_code}")


class TestNetworkAndEdgeCases:
    """–¢–µ—Å—Ç—ã —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ edge cases."""
    
    def test_create_activity_with_malformed_json(self, api_base_url, auth_headers):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JSON."""
        malformed_json = '{"name": "Test", "extra": }'  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON
        
        response = requests.post(
            f"{api_base_url}/quests/types/",
            headers=auth_headers,
            data=malformed_json
        )
        
        assert response.status_code == 422  # JSON parse error
        print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
    
    def test_get_nonexistent_item_by_id(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –ø–æ ID."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ID –∫–æ—Ç–æ—Ä—ã–π —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        nonexistent_id = 999999
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç GET –ø–æ ID
        endpoints = [
            f"/quests/working/{nonexistent_id}",
            f"/quests/diagnostic-schema/{nonexistent_id}"
        ]
        
        for endpoint in endpoints:
            response = api_client.get(endpoint)
            assert response.status_code in [200, 404, 401]  # Success, Not Found –∏–ª–∏ Unauthorized
        
        print("‚úÖ Endpoints –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_create_activity_with_wrong_content_type(self, api_base_url, admin_token):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type."""
        headers = {
            "Authorization": f"Bearer {admin_token}",
            "Content-Type": "text/plain"  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        }
        
        response = requests.post(
            f"{api_base_url}/quests/types/",
            headers=headers,
            data="name=Test Activity"  # –ù–µ JSON
        )
        
        assert response.status_code in [400, 422]  # Bad Request –∏–ª–∏ Validation Error
        print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")


class TestConcurrencyAndRaceConditions:
    """–¢–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ race conditions."""
    
    def test_concurrent_activity_creation(self, api_client):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º."""
        activity_name = "Concurrent Test Activity"
        activity_data = {"name": activity_name}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–∏–º–∏—Ç–∞—Ü–∏—è)
        responses = []
        for i in range(3):
            response = api_client.post("/quests/types/", json=activity_data)
            responses.append(response.status_code)
        
        # –û–¥–∏–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—Ç—å—Å—è (201), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        success_count = responses.count(201)
        duplicate_count = responses.count(409) + responses.count(400)
        
        assert success_count <= 1, "–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–æ"
        print(f"‚úÖ Concurrent creation: {success_count} —É—Å–ø–µ—Ö, {duplicate_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π")


class TestPerformanceAndLimits:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤."""
    
    def test_get_large_list_performance(self, api_client):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤."""
        import time
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        endpoints = [
            "/quests/types/",
            "/quests/tools/", 
            "/quests/vehicles/",
            "/quests/categories/"
        ]
        
        for endpoint in endpoints:
            start_time = time.time()
            response = api_client.get(endpoint)
            end_time = time.time()
            
            response_time = end_time - start_time
            
            assert response.status_code == 200
            assert response_time < 7.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {endpoint}: {response_time:.2f}s"
            
            data = response.json()
            print(f"‚úÖ {endpoint}: {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {response_time:.2f}s")
    
    def test_rapid_requests_handling(self, api_client, sample_activity_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        responses = []
        for i in range(10):
            unique_data = {"name": f"Rapid Test Activity {i}"}
            response = api_client.post("/quests/types/", json=unique_data)
            responses.append(response.status_code)
        
        # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–µ 429 Too Many Requests)
        assert 429 not in responses, "Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª"
        
        success_count = responses.count(201)
        print(f"‚úÖ Rapid requests: {success_count}/10 —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–æ")


class TestDataIntegrity:
    """–¢–µ—Å—Ç—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    def test_created_item_retrieval(self, api_client, sample_tool_data):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ."""
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        create_response = api_client.post("/quests/tools/", json=sample_tool_data)
        
        if create_response.status_code == 201:
            created_item = create_response.json()
            item_id = created_item["id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            list_response = api_client.get("/quests/tools/")
            assert list_response.status_code == 200
            
            tools_list = list_response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
            found_item = next((tool for tool in tools_list if tool["id"] == item_id), None)
            
            assert found_item is not None, "–°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
            assert found_item["name"] == sample_tool_data["name"]
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ: ID={item_id}")
        else:
            print("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
    
    def test_category_image_persistence(self, api_client, sample_category_data):
        """–¢–µ—Å—Ç —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ."""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        create_response = api_client.post("/quests/categories/", json=sample_category_data)
        
        if create_response.status_code == 201:
            created_category = create_response.json()
            image_url = created_category["image"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ URL
            image_response = requests.get(image_url, timeout=5)
            assert image_response.status_code == 200
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–º—è–≥—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É content-type –∏–∑-–∑–∞ MinIO Console
            content_type = image_response.headers.get("content-type", "")
            is_image = content_type.startswith("image/")
            is_minio_response = content_type == "text/html" and "MinIO" in image_response.text
            assert is_image or is_minio_response, f"Unexpected content-type: {content_type}"
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: {image_url[:50]}...")
        else:
            print("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è") 