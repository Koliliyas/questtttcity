import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_enum_values():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum –≤ –æ–±–µ–∏—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –ë–∞–∑–∞ questcity
    print("\nüìã –ë–ê–ó–ê questcity:")
    engine_questcity = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity',
        echo=False
    )

    session_questcity = sessionmaker(
        engine_questcity,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session_questcity() as sess:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum grouptype
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            enum_values = result.fetchall()
            print(f"    üìã –ó–Ω–∞—á–µ–Ω–∏—è enum grouptype: {[row[0] for row in enum_values]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'ALONE'
            has_alone = any('ALONE' in str(row[0]) for row in enum_values)
            print(f"    ‚úÖ –ï—Å—Ç—å –ª–∏ 'ALONE': {has_alone}")

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ë–∞–∑–∞ questcity_db
    print("\nüìã –ë–ê–ó–ê questcity_db:")
    engine_questcity_db = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )

    session_questcity_db = sessionmaker(
        engine_questcity_db,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session_questcity_db() as sess:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum grouptype
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            enum_values = result.fetchall()
            print(f"    üìã –ó–Ω–∞—á–µ–Ω–∏—è enum grouptype: {[row[0] for row in enum_values]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'ALONE'
            has_alone = any('ALONE' in str(row[0]) for row in enum_values)
            print(f"    ‚úÖ –ï—Å—Ç—å –ª–∏ 'ALONE': {has_alone}")

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")

    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫ –∫–∞–∫–æ–π –±–∞–∑–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è FastAPI...")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª - DATABASE_NAME –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å questcity_db")

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –∑–Ω–∞—á–µ–Ω–∏—è...")
    await check_enum_values()

if __name__ == "__main__":
    asyncio.run(main())

























