import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_test_db():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö test...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.example
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost/test',
            echo=True
        )
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É...")
            result = await session.execute(text("SELECT current_schema()"))
            schema = result.scalar()
            print(f"    –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞: {schema}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public...")
            result = await session.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name
            """))
            public_tables = result.fetchall()
            print(f"    –¢–∞–±–ª–∏—Ü—ã –≤ public: {[t[0] for t in public_tables]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity...")
            if any('activity' in t[0] for t in public_tables):
                result = await session.execute(text("SELECT * FROM activity"))
                all_rows = result.fetchall()
                print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ activity: {len(all_rows)}")
                print(f"    –í—Å–µ –∑–∞–ø–∏—Å–∏: {all_rows}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å ID = 1
                result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
                row = result.fetchone()
                print(f"    –ó–∞–ø–∏—Å—å —Å ID = 1: {row}")
                
                if row:
                    print("  ‚úÖ –ó–∞–ø–∏—Å—å activity —Å ID = 1 –ù–ê–ô–î–ï–ù–ê!")
                else:
                    print("  ‚ùå –ó–∞–ø–∏—Å—å activity —Å ID = 1 –ù–ï –ù–ê–ô–î–ï–ù–ê!")
            else:
                print("  ‚ùå –¢–∞–±–ª–∏—Ü–∞ activity –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ test!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                if public_tables:
                    print("  üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
                    for table in public_tables:
                        print(f"    - {table[0]}")
                else:
                    print("  ‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ –¢–ê–ë–õ–ò–¶!")
                    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö test...")
    await check_test_db()

if __name__ == "__main__":
    asyncio.run(main())

























