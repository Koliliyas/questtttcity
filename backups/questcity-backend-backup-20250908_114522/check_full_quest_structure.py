import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_full_quest_structure():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity_db
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏—Ö —Ç–∏–ø–∞–º–∏
            result = await sess.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = 'quest' AND table_schema = 'public'
                ORDER BY ordinal_position
            """))
            
            columns = result.fetchall()
            print(f"    üìã –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã quest:")
            for col in columns:
                print(f"      - {col[0]}: {col[1]} (nullable: {col[2]}, default: {col[3]})")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–≤–µ—Å—Ç—ã
            result = await sess.execute(text("""
                SELECT id, name, description, image, created_at
                FROM quest
                ORDER BY created_at DESC
                LIMIT 10
            """))
            
            recent_quests = result.fetchall()
            print(f"    üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–≤–µ—Å—Ç–æ–≤:")
            for quest in recent_quests:
                print(f"      - ID: {quest[0]}, Name: {quest[1]}, Created: {quest[4]}")

            print("\n  üîç –ò—â–µ–º –∫–≤–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'test20'...")

            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–≤–µ—Å—Ç
            result = await sess.execute(text("""
                SELECT id, name, description, image, created_at
                FROM quest
                WHERE name = 'test20'
            """))
            
            test20_quest = result.fetchone()
            if test20_quest:
                print(f"    ‚úÖ –ö–≤–µ—Å—Ç 'test20' –Ω–∞–π–¥–µ–Ω: {test20_quest}")
            else:
                print("    ‚ùå –ö–≤–µ—Å—Ç 'test20' –ù–ï –Ω–∞–π–¥–µ–Ω!")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–≤–µ—Å—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏...")

            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            result = await sess.execute(text("""
                SELECT id, name, description, image, created_at
                FROM quest
                WHERE name LIKE '%test%'
                ORDER BY created_at DESC
            """))
            
            test_like_quests = result.fetchall()
            print(f"    üìã –ö–≤–µ—Å—Ç—ã —Å 'test' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:")
            for quest in test_like_quests:
                print(f"      - ID: {quest[0]}, Name: {quest[1]}, Created: {quest[4]}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")
    await check_full_quest_structure()

if __name__ == "__main__":
    asyncio.run(main())

























