#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è testuser@questcity.com
"""

import asyncio
import asyncpg
import os
import sys
from dotenv import load_dotenv
import bcrypt

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.core.authentication.utils import hash_password, validate_password

load_dotenv()

async def check_and_set_testuser_password():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è testuser"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è testuser@questcity.com")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
        user_data = await conn.fetchrow("""
            SELECT id, username, email, password
            FROM "user" 
            WHERE email = 'testuser@questcity.com'
        """)
        
        if not user_data:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å testuser@questcity.com –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
        print(f"  - Username: {user_data['username']}")
        print(f"  - Email: {user_data['email']}")
        print(f"  - Password hash: {user_data['password'][:50]}...")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        possible_passwords = [
            "testuser123",
            "password123", 
            "testuser",
            "123456",
            "admin123"
        ]
        
        current_hash = user_data['password']
        found_password = None
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏...")
        for password in possible_passwords:
            try:
                if validate_password(password, current_hash):
                    found_password = password
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
                    break
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è '{password}': {e}")
        
        if not found_password:
            print(f"\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: password123")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
            new_password = "password123"
            new_hash = hash_password(new_password).decode('utf-8')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
            await conn.execute("""
                UPDATE "user" 
                SET password = $1
                WHERE email = 'testuser@questcity.com'
            """, new_hash)
            
            print(f"‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            found_password = new_password
        
        print(f"\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –∑–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"  - Email: testuser@questcity.com")
        print(f"  - Password: {found_password}")
        print(f"  - –†–æ–ª—å: USER (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(check_and_set_testuser_password())
