#!/bin/bash

# QuestCity Backend - Comprehensive API Testing Script (HIGH-014)
# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –í–°–ï–• backend —Ç–µ—Å—Ç–æ–≤
# 
# –í–∫–ª—é—á–∞–µ—Ç:
# - Comprehensive Integration Tests (pytest) - CRUD, validation, error scenarios
# - Quest API Tests (bash/curl) - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–≤–µ—Å—Ç–æ–≤
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./test_quests_api.sh                    - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
#   ./test_quests_api.sh --quick            - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#   ./test_quests_api.sh --pytest-only     - –¢–æ–ª—å–∫–æ pytest —Ç–µ—Å—Ç—ã
#   ./test_quests_api.sh --bash-only        - –¢–æ–ª—å–∫–æ bash —Ç–µ—Å—Ç—ã  
#   ./test_quests_api.sh --auth             - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="http://localhost:8000/api/v1"
TEST_USER_EMAIL="admin@questcity.com"
TEST_USER_PASSWORD="admin123"
TOKEN_FILE=".admin_token"
ACCESS_TOKEN=""

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PYTEST_RESULT=0
BASH_TESTS_RESULT=0
TOTAL_TESTS_RUN=0
TOTAL_TESTS_PASSED=0

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_test() {
    echo -e "${YELLOW}üß™ –¢–µ—Å—Ç: $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ API
check_response() {
    local response="$1"
    local expected_status="$2"
    local test_name="$3"
    
    local status=$(echo "$response" | jq -r '.status // empty')
    local detail=$(echo "$response" | jq -r '.detail // empty')
    
    if [[ "$response" == *"\"$expected_status\""* ]] || [[ "$status" == "$expected_status" ]]; then
        print_success "$test_name - –û–ö"
        return 0
    else
        print_error "$test_name - FAILED"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
api_request() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    local content_type="${4:-application/json}"
    
    local auth_header=""
    if [ -n "$ACCESS_TOKEN" ]; then
        auth_header="-H \"Authorization: Bearer $ACCESS_TOKEN\""
    fi
    
    if [ "$method" = "GET" ]; then
        eval curl -s -X GET \"$API_BASE$endpoint\" $auth_header
    elif [ "$method" = "POST" ]; then
        eval curl -s -X POST \"$API_BASE$endpoint\" \
            -H \"Content-Type: $content_type\" \
            $auth_header \
            -d \'$data\'
    elif [ "$method" = "PUT" ]; then
        eval curl -s -X PUT \"$API_BASE$endpoint\" \
            -H \"Content-Type: $content_type\" \
            $auth_header \
            -d \'$data\'
    elif [ "$method" = "PATCH" ]; then
        eval curl -s -X PATCH \"$API_BASE$endpoint\" \
            -H \"Content-Type: $content_type\" \
            $auth_header \
            -d \'$data\'
    elif [ "$method" = "DELETE" ]; then
        eval curl -s -X DELETE \"$API_BASE$endpoint\" $auth_header
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    local health_response=$(curl -s "$API_BASE/health/" 2>/dev/null || echo "error")
    
    if [[ "$health_response" == *"status"* ]]; then
        print_success "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $API_BASE"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: ./quick_start.sh --bg"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
get_auth_token() {
    print_status "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    if [ -f "$TOKEN_FILE" ]; then
        ACCESS_TOKEN=$(cat "$TOKEN_FILE")
        if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "" ]; then
            print_success "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            return 0
        fi
    fi
    
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    print_info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."
    # API login –æ–∂–∏–¥–∞–µ—Ç form-data, –∞ –Ω–µ JSON
    local response=$(curl -s -X POST "$API_BASE/auth/login" \
        -d "login=$TEST_USER_EMAIL" \
        -d "password=$TEST_USER_PASSWORD" 2>/dev/null || echo '{"error":"request_failed"}')
    
    ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken // empty' 2>/dev/null || echo "")
    
    if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ]; then
        print_success "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        echo "$ACCESS_TOKEN" > "$TOKEN_FILE"
        return 0
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
        print_info "–û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
test_get_quests() {
    print_test "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤"
    
    local response=$(api_request "GET" "/quests/")
    
    if [[ "$response" == *"["* ]] || [[ "$response" == *"items"* ]]; then
        print_success "–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω"
        local count=$(echo "$response" | jq '. | length' 2>/dev/null || echo "unknown")
        print_info "–ù–∞–π–¥–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: $count"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –ø–æ ID
test_get_quest_by_id() {
    print_test "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –ø–æ ID"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID
    local quests_response=$(api_request "GET" "/quests/")
    local quest_id=$(echo "$quests_response" | jq -r '.[0].id // empty' 2>/dev/null || echo "")
    
    if [ -z "$quest_id" ] || [ "$quest_id" = "null" ]; then
        print_warning "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        return 1
    fi
    
    local response=$(api_request "GET" "/quests/$quest_id")
    
    if [[ "$response" == *"id"* ]]; then
        print_success "–ö–≤–µ—Å—Ç –ø–æ ID –ø–æ–ª—É—á–µ–Ω"
        print_info "ID –∫–≤–µ—Å—Ç–∞: $quest_id"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –ø–æ ID"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
test_create_quest() {
    print_test "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞"
    
    if [ -z "$ACCESS_TOKEN" ]; then
        print_warning "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
        return 1
    fi
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)
    local base64_image="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º base64 –¥–ª—è mentor_preferences (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª)
    local base64_excel="UEsDBBQACAgIAAAAAAAAAAAAAAAAAAAAAAAUAAAAeGwvd29ya2Jvb2sueG1sRU9BDsIwDLz3iv4g7xYBQqhJKxASEhI/4OImXmuTO3ESaPv7urTAcTQz45md7fWt731zYoIex+A6FQSMeGI/Fo4c0mYd4HsY0Ic15lLOphtxmQD2YYz5kz3vOUdrr2XfqMZKwpZuCdZ5aw/Y1Ap3vI5P1AtQH1ptL4X3s1gKKzUYn1J5xkxaXJNXj4TaZqFWO6q7mU/wBQAA//8="
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å timestamp (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞)
    local timestamp=$(date +"%H%M%S")
    local quest_data='{
        "name": "Test API '$timestamp'",
        "description": "–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        "image": "'$base64_image'",
        "credits": {
            "cost": 100,
            "reward": 200
        },
        "main_preferences": {
            "types": [1, 2],
            "places": [1],
            "vehicles": [1],
            "tools": [1]
        },
        "mentor_preferences": "'$base64_excel'",
        "merch": [],
        "points": [
            {
                "name_of_location": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏",
                "order": 1,
                "type": {
                    "type_id": 1,
                    "type_photo": "Face verification",
                    "type_code": "TEST_CODE",
                    "type_word": "–¢–µ—Å—Ç"
                },
                "tool_id": 1,
                "places": [
                    {
                        "longitude": 37.6156,
                        "latitude": 55.7522,
                        "detections_radius": 10.0,
                        "height": 0.0,
                        "interaction_inaccuracy": 5.0,
                        "part": 1,
                        "random_occurrence": 5.0
                    }
                ],
                "files": {
                    "file": "'$base64_image'",
                    "is_divide": false
                }
            }
        ]
    }'
    
    local response=$(api_request "POST" "/quests/" "$quest_data")
    
    if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
        print_success "–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        local new_quest_id=$(echo "$response" | jq -r '.id // empty' 2>/dev/null || echo "")
        print_info "ID –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞: $new_quest_id"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        echo "$new_quest_id" > .test_quest_id
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"
        print_error "–û—Ç–≤–µ—Ç: $response"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if [[ "$response" == *"detail"* ]]; then
            print_info "üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:"
            echo "$response" | jq '.detail // empty' 2>/dev/null || echo "$response"
        fi
        
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
test_update_quest() {
    print_test "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
    
    if [ -z "$ACCESS_TOKEN" ]; then
        print_warning "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
        return 1
    fi
    
    local quest_id=""
    if [ -f ".test_quest_id" ]; then
        quest_id=$(cat .test_quest_id)
    fi
    
    if [ -z "$quest_id" ]; then
        print_warning "–ù–µ—Ç ID –∫–≤–µ—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        return 1
    fi
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)
    local base64_image="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º base64 –¥–ª—è mentor_preferences (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª)
    local base64_excel="UEsDBBQACAgIAAAAAAAAAAAAAAAAAAAAAAAUAAAAeGwvd29ya2Jvb2sueG1sRU9BDsIwDLz3iv4g7xYBQqhJKxASEhI/4OImXmuTO3ESaPv7urTAcTQz45md7fWt731zYoIex+A6FQSMeGI/Fo4c0mYd4HsY0Ic15lLOphtxmQD2YYz5kz3vOUdrr2XfqMZKwpZuCdZ5aw/Y1Ap3vI5P1AtQH1ptL4X3s1gKKzUYn1J5xkxaXJNXj4TaZqFWO6q7mU/wBQAA//8="
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    local timestamp=$(date +"%H%M%S")
    local update_data='{
        "name": "Updated '$timestamp'",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö",
        "image": "'$base64_image'",
        "credits": {
            "cost": 150,
            "reward": 250
        },
        "main_preferences": {
            "types": [1, 2, 3],
            "places": [1, 2],
            "vehicles": [1],
            "tools": [1, 2]
        },
        "mentor_preferences": "'$base64_excel'",
        "merch": [],
        "points": [
            {
                "name_of_location": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞",
                "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏",
                "order": 1,
                "type": {
                    "type_id": 1,
                    "type_photo": "Photo Matching",
                    "type_code": "UPDATED_CODE",
                    "type_word": "–û–±–Ω–æ–≤–ª–µ–Ω–æ"
                },
                "tool_id": 1,
                "places": [
                    {
                        "longitude": 37.6156,
                        "latitude": 55.7522,
                        "detections_radius": 8.0,
                        "height": 0.0,
                        "interaction_inaccuracy": 10.0,
                        "part": 1,
                        "random_occurrence": 7.0
                    }
                ],
                "files": {
                    "file": "'$base64_image'",
                    "is_divide": false
                }
            }
        ]
    }'
    
    local response=$(api_request "PATCH" "/quests/$quest_id" "$update_data")
    
    if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
        print_success "–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞"
        print_error "–û—Ç–≤–µ—Ç: $response"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if [[ "$response" == *"detail"* ]]; then
            print_info "üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:"
            echo "$response" | jq '.detail // empty' 2>/dev/null || echo "$response"
        fi
        
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
test_delete_quest() {
    print_test "–£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
    
    if [ -z "$ACCESS_TOKEN" ]; then
        print_warning "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
        return 1
    fi
    
    local quest_id=""
    if [ -f ".test_quest_id" ]; then
        quest_id=$(cat .test_quest_id)
    fi
    
    if [ -z "$quest_id" ]; then
        print_warning "–ù–µ—Ç ID –∫–≤–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        return 1
    fi
    
    local response=$(api_request "DELETE" "/quests/$quest_id")
    
    if [[ "$response" == *"success"* ]] || [[ "$response" == "" ]]; then
        print_success "–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        rm -f .test_quest_id
    else
        print_error "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
test_get_categories() {
    print_test "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–≤–µ—Å—Ç–æ–≤"
    
    local response=$(api_request "GET" "/quests/categories/")
    
    if [[ "$response" == *"["* ]] || [[ "$response" == *"items"* ]]; then
        print_success "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã"
        local count=$(echo "$response" | jq '. | length' 2>/dev/null || echo "unknown")
        print_info "–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $count"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest —Ç–µ—Å—Ç–æ–≤
run_pytest_tests() {
    print_status "–ó–∞–ø—É—Å–∫ Comprehensive Integration Tests (pytest)..."
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë            üß™ PYTEST COMPREHENSIVE TESTS                    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    local pytest_mode="${1:-all}"
    
    if [ ! -f "run_comprehensive_tests.py" ]; then
        print_error "–§–∞–π–ª run_comprehensive_tests.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    local pytest_args=""
    case "$pytest_mode" in
        quick)
            pytest_args="--quick"
            print_info "–†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä—ã–µ CRUD —Ç–µ—Å—Ç—ã"
            ;;
        regression)
            pytest_args="--regression"
            print_info "–†–µ–∂–∏–º: –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
            ;;
        validation)
            pytest_args="--validation"
            print_info "–†–µ–∂–∏–º: –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
            ;;
        performance)
            pytest_args="--performance"
            print_info "–†–µ–∂–∏–º: Performance —Ç–µ—Å—Ç—ã"
            ;;
        *)
            print_info "–†–µ–∂–∏–º: –í—Å–µ comprehensive —Ç–µ—Å—Ç—ã"
            ;;
    esac
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python 3
    if ! command -v python3 &> /dev/null; then
        print_error "python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Ç–µ—Å—Ç—ã
    if python3 run_comprehensive_tests.py $pytest_args; then
        print_success "‚úÖ Pytest —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
        PYTEST_RESULT=0
        ((TOTAL_TESTS_PASSED++))
    else
        print_error "‚ùå Pytest —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        PYTEST_RESULT=1
    fi
    
    ((TOTAL_TESTS_RUN++))
    echo ""
    
    return $PYTEST_RESULT
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ bash —Ç–µ—Å—Ç–æ–≤
run_bash_tests() {
    print_status "–ó–∞–ø—É—Å–∫ Quest API Tests (bash/curl)..."
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üîß BASH API TESTS                               ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    local bash_mode="${1:-full}"
    local failed_tests=0
    local total_bash_tests=0
    
    case "$bash_mode" in
        quick)
            print_info "–†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä—ã–µ bash —Ç–µ—Å—Ç—ã"
            ((total_bash_tests+=2))
            test_get_quests || ((failed_tests++))
            test_get_categories || ((failed_tests++))
            ;;
        auth)
            print_info "–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ get_auth_token
            ;;
        *)
            print_info "–†–µ–∂–∏–º: –ü–æ–ª–Ω—ã–µ bash —Ç–µ—Å—Ç—ã API"
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è ==="
            ((total_bash_tests+=3))
            test_get_quests || ((failed_tests++))
            test_get_quest_by_id || ((failed_tests++))
            test_get_categories || ((failed_tests++))
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ==="
            ((total_bash_tests+=3))
            test_create_quest || ((failed_tests++))
            test_update_quest || ((failed_tests++))
            test_delete_quest || ((failed_tests++))
            ;;
    esac
    
    if [ $failed_tests -eq 0 ]; then
        print_success "‚úÖ Bash —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ ($total_bash_tests/$total_bash_tests)"
        BASH_TESTS_RESULT=0
        ((TOTAL_TESTS_PASSED++))
    else
        print_error "‚ùå Bash —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ ($((total_bash_tests-failed_tests))/$total_bash_tests –ø—Ä–æ—à–ª–∏)"
        BASH_TESTS_RESULT=1
    fi
    
    ((TOTAL_TESTS_RUN++))
    echo ""
    
    return $BASH_TESTS_RESULT
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_test_summary() {
    echo ""
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í                    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    local overall_result=0
    
    echo -e "${YELLOW}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HIGH-014:${NC}"
    echo ""
    
    # Pytest —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if [ $PYTEST_RESULT -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Comprehensive Integration Tests (pytest): –ü–†–û–®–õ–ò${NC}"
    else
        echo -e "${RED}‚ùå Comprehensive Integration Tests (pytest): –ü–†–û–í–ê–õ–ï–ù–´${NC}"
        overall_result=1
    fi
    
    # Bash —Ç–µ—Å—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if [ $BASH_TESTS_RESULT -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Quest API Tests (bash/curl): –ü–†–û–®–õ–ò${NC}"
    else
        echo -e "${RED}‚ùå Quest API Tests (bash/curl): –ü–†–û–í–ê–õ–ï–ù–´${NC}"
        overall_result=1
    fi
    
    echo ""
    echo -e "${YELLOW}–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${NC}$TOTAL_TESTS_PASSED/$TOTAL_TESTS_RUN –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏"
    
    if [ $overall_result -eq 0 ]; then
        echo -e "${GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
        echo -e "${CYAN}Backend API –≥–æ—Ç–æ–≤ –∫ production${NC}"
    else
        echo -e "${RED}üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´!${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏${NC}"
    fi
    
    echo ""
    return $overall_result
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo -e "${CYAN}QuestCity Backend - Comprehensive API Testing Script (HIGH-014)${NC}"
    echo ""
    echo -e "${YELLOW}–û–ø–∏—Å–∞–Ω–∏–µ:${NC}"
    echo "  –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –í–°–ï–• backend —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤ HIGH-014:"
    echo "  - Comprehensive Integration Tests (pytest): CRUD, validation, error scenarios"  
    echo "  - Quest API Tests (bash/curl): –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–≤–µ—Å—Ç–æ–≤"
    echo ""
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./test_quests_api.sh                    - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    echo "  ./test_quests_api.sh --quick            - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    echo "  ./test_quests_api.sh --pytest-only     - –¢–æ–ª—å–∫–æ pytest —Ç–µ—Å—Ç—ã"
    echo "  ./test_quests_api.sh --bash-only        - –¢–æ–ª—å–∫–æ bash —Ç–µ—Å—Ç—ã"
    echo "  ./test_quests_api.sh --auth             - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    echo "  ./test_quests_api.sh --help             - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${YELLOW}Pytest –ø–æ–¥—Ä–µ–∂–∏–º—ã (—Å --pytest-only):${NC}"
    echo "  ./test_quests_api.sh --pytest-only --quick        - –ë—ã—Å—Ç—Ä—ã–µ CRUD —Ç–µ—Å—Ç—ã"
    echo "  ./test_quests_api.sh --pytest-only --regression   - –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  ./test_quests_api.sh --pytest-only --validation   - –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    echo "  ./test_quests_api.sh --pytest-only --performance  - Performance —Ç–µ—Å—Ç—ã"
    echo ""
    echo -e "${YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${NC}"
    echo "  - –ó–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä QuestCity Backend"
    echo "  - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON"
    echo "  - Python 3 –¥–ª—è pytest —Ç–µ—Å—Ç–æ–≤"
    echo "  - Poetry –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã SKIP_POETRY=1)"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë         üß™ QuestCity Comprehensive API Testing (HIGH-014)   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq
    if ! command -v jq &> /dev/null; then
        print_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install jq"
        exit 1
    fi
    
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --auth)
            check_server
            get_auth_token
            exit 0
            ;;
        --pytest-only)
            print_status "–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ pytest —Ç–µ—Å—Ç–æ–≤..."
            check_server
            get_auth_token
            
            local pytest_mode="all"
            if [ "${2:-}" = "--quick" ]; then
                pytest_mode="quick"
            elif [ "${2:-}" = "--regression" ]; then
                pytest_mode="regression"
            elif [ "${2:-}" = "--validation" ]; then
                pytest_mode="validation"
            elif [ "${2:-}" = "--performance" ]; then
                pytest_mode="performance"
            fi
            
            run_pytest_tests "$pytest_mode"
            show_test_summary
            exit $?
            ;;
        --bash-only)
            print_status "–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ bash —Ç–µ—Å—Ç–æ–≤..."
            check_server
            get_auth_token
            run_bash_tests "full"
            show_test_summary
            exit $?
            ;;
        --quick)
            print_status "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤..."
            check_server
            get_auth_token
            
            run_pytest_tests "quick"
            run_bash_tests "quick"
            show_test_summary
            exit $?
            ;;
        *)
            # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            print_status "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (HIGH-014)..."
            
            check_server
            get_auth_token
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            run_pytest_tests "all"
            run_bash_tests "full"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            show_test_summary
            exit $?
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@" 