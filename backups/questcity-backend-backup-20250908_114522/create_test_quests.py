#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–≤–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.
"""

import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

def create_test_quests():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="questcity_db",
            user="postgres",
            password="postgres"
        )
        
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤...")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–≤–µ—Å—Ç—ã
        print("üóëÔ∏è –û—á–∏—â–∞—é –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–≤–µ—Å—Ç—ã...")
        cur.execute("DELETE FROM quest")
        deleted_count = cur.rowcount
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {deleted_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        cur.execute("SELECT id, name FROM category LIMIT 1")
        category_result = cur.fetchone()
        if not category_result:
            print("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        category_id = category_result["id"]
        category_name = category_result["name"]
        print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name} (ID: {category_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
        cur.execute("SELECT id, username FROM \"user\" WHERE role = 2 LIMIT 1")
        admin_result = cur.fetchone()
        if not admin_result:
            print("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        admin_id = admin_result["id"]
        admin_username = admin_result["username"]
        print(f"üë§ –ò—Å–ø–æ–ª—å–∑—É—é –∞–¥–º–∏–Ω–∞: {admin_username} (ID: {admin_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã
        test_quests = [
            {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç 1",
                "description": "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                "category_id": category_id,
                "level": "EASY",
                "timeframe": "ONE_HOUR",
                "group": "SOLO",
                "cost": 100,
                "reward": 200,
                "pay_extra": 0.0,
                "is_subscription": False,
                "created_by": admin_id,
                "created_at": datetime.now(),
                "updated_at": datetime.now()
            },
            {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç 2", 
                "description": "–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
                "category_id": category_id,
                "level": "MIDDLE",
                "timeframe": "TWO_HOURS", 
                "group": "GROUP",
                "cost": 150,
                "reward": 300,
                "pay_extra": 5.0,
                "is_subscription": True,
                "created_by": admin_id,
                "created_at": datetime.now(),
                "updated_at": datetime.now()
            }
        ]
        
        print("‚ûï –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã...")
        
        for quest_data in test_quests:
            cur.execute("""
                INSERT INTO quest (
                    name, description, category_id, level, timeframe, "group", 
                    cost, reward, pay_extra, is_subscription, created_by, 
                    created_at, updated_at
                ) VALUES (
                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                ) RETURNING id
            """, (
                quest_data["name"], quest_data["description"], quest_data["category_id"],
                quest_data["level"], quest_data["timeframe"], quest_data["group"],
                quest_data["cost"], quest_data["reward"], quest_data["pay_extra"],
                quest_data["is_subscription"], quest_data["created_by"],
                quest_data["created_at"], quest_data["updated_at"]
            ))
            
            quest_id = cur.fetchone()["id"]
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∫–≤–µ—Å—Ç: {quest_data['name']} (ID: {quest_id})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cur.execute("SELECT COUNT(*) as count FROM quest")
        quests_count = cur.fetchone()["count"]
        print(f"üìä –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {quests_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:")
        cur.execute("SELECT id, name, level FROM quest ORDER BY id")
        for quest in cur.fetchall():
            print(f"  - ID: {quest['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {quest['name']}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: {quest['level']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if 'conn' in locals():
            conn.rollback()
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()
    
    print("üéâ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    create_test_quests()
