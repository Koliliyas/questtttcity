#!/bin/bash

# QuestCity Backend - Universal Quick Start Script
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ backend —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./quick_start.sh           - –ó–∞–ø—É—Å–∫ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
#   ./quick_start.sh --bg      - –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
#   ./quick_start.sh --stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
#   ./quick_start.sh --logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

set -e

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    print_status "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl
    if ! command -v curl &> /dev/null; then
        print_error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
        print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Poetry
    if ! command -v poetry &> /dev/null; then
        print_warning "Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ pip..."
        python3 -m pip install poetry 2>/dev/null || python -m pip install poetry 2>/dev/null || {
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Poetry. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: https://python-poetry.org/docs/#installation"
            exit 1
        }
    fi
    
    print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
ADMIN_EMAIL="admin@questcity.com"
ADMIN_PASSWORD="Admin123!"
ADMIN_USERNAME="admin"
TOKEN_FILE=".admin_token"
API_BASE="http://localhost:8000/api/v1"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo -e "${CYAN}QuestCity Backend - Quick Start Script${NC}"
    echo ""
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./quick_start.sh           - –ó–∞–ø—É—Å–∫ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å"
    echo "  ./quick_start.sh --bg      - –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  ./quick_start.sh --stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  ./quick_start.sh --logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  ./quick_start.sh --status  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  ./quick_start.sh --help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${YELLOW}Endpoints –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo "  üìñ API Docs:   http://localhost:8000/docs"
    echo "  üîç ReDoc:      http://localhost:8000/redoc"
    echo "  ‚ù§Ô∏è  Health:     http://localhost:8000/api/v1/health/"
    echo "  üåê API v1:     http://localhost:8000/api/v1/"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
stop_server() {
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ QuestCity Backend..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ PID —Ñ–∞–π–ª—É
    if [ -f ".server_pid" ]; then
        PID=$(cat .server_pid)
        if ps -p $PID > /dev/null 2>&1; then
            kill $PID
            rm -f .server_pid
            print_success "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: $PID)"
        else
            print_warning "–°–µ—Ä–≤–µ—Ä —Å PID $PID —É–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            rm -f .server_pid
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã uvicorn –∏ python main.py
    pkill -f "uvicorn.*questcity" 2>/dev/null || true
    pkill -f "python.*main.py" 2>/dev/null || true
    pkill -f "python3.*main.py" 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if [ -f "$TOKEN_FILE" ]; then
        rm -f "$TOKEN_FILE"
        print_info "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω"
    fi
    
    print_success "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã QuestCity Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ QuestCity Backend..."
    
    if [ -f ".server_pid" ]; then
        PID=$(cat .server_pid)
        if ps -p $PID > /dev/null 2>&1; then
            print_success "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
            print_info "–õ–æ–≥–∏: tail -f server_output.log"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if curl -s http://localhost:8000/api/v1/health/ > /dev/null 2>&1; then
                print_success "API –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8000/docs"
            else
                print_warning "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
        else
            print_warning "PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            rm -f .server_pid
        fi
    else
        print_info "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    if [ -f "server_output.log" ]; then
        print_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ QuestCity Backend (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
        tail -f server_output.log
    else
        print_error "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω?"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
create_admin_if_needed() {
    print_status "üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
    local check_result
    check_result=$(poetry run python3 -c "
import asyncio
import sys
sys.path.insert(0, 'src')
from db.engine import async_session_factory
from db.models.user import User
from sqlalchemy import select

async def check_admin():
    async with async_session_factory() as session:
        result = await session.execute(select(User).where(User.email == '$ADMIN_EMAIL'))
        admin = result.scalar_one_or_none()
        return admin is not None

try:
    result = asyncio.run(check_admin())
    print('exists' if result else 'not_exists')
except:
    print('error')
" 2>/dev/null || echo "error")
    
    if [ "$check_result" = "exists" ]; then
        print_success "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
        return 0
    elif [ "$check_result" = "error" ]; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ..."
    else
        print_info "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º..."
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    if poetry run python3 scripts/create_admin.py \
        --username "$ADMIN_USERNAME" \
        --email "$ADMIN_EMAIL" \
        --password "$ADMIN_PASSWORD" \
        --first-name "System" \
        --last-name "Administrator" \
        --credits 10000 \
        --force >/dev/null 2>&1; then
        print_success "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω"
    else
        print_warning "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
get_admin_token() {
    print_status "üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞..."
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    local max_attempts=10
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$API_BASE/health/" >/dev/null 2>&1; then
            print_success "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            break
        fi
        print_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (API –æ–∂–∏–¥–∞–µ—Ç form-data, –∞ –Ω–µ JSON)
    local response
    response=$(curl -s -X POST "$API_BASE/auth/login" \
        -d "login=$ADMIN_EMAIL" \
        -d "password=$ADMIN_PASSWORD" 2>/dev/null || echo '{"error":"request_failed"}')
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –±–µ–∑ jq
    local access_token=""
    if [[ "$response" == *"accessToken"* ]]; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
        access_token=$(echo "$response" | sed -n 's/.*"accessToken":"\([^"]*\)".*/\1/p')
    fi
    
    if [ -n "$access_token" ] && [ "$access_token" != "null" ] && [ "$access_token" != "" ]; then
        echo "$access_token" > "$TOKEN_FILE"
        print_success "–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        print_info "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: $TOKEN_FILE"
        return 0
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        print_error "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API —Å —Ç–æ–∫–µ–Ω–æ–º
test_admin_access() {
    print_status "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ API..."
    
    if [ ! -f "$TOKEN_FILE" ]; then
        print_warning "–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç"
        return 1
    fi
    
    local token
    token=$(cat "$TOKEN_FILE")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    local health_response
    health_response=$(curl -s -X GET "$API_BASE/health/" 2>/dev/null || echo '{"error":"request_failed"}')
    
    if [[ "$health_response" == *"status"* ]] || [[ "$health_response" == *"ok"* ]]; then
        print_success "Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $health_response"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API –∫–≤–µ—Å—Ç–æ–≤
    local response
    response=$(curl -s -X GET "$API_BASE/quests/" \
        -H "Authorization: Bearer $token" \
        -H "Content-Type: application/json" 2>/dev/null || echo '{"error":"request_failed"}')
    
    if [[ "$response" == *"["* ]] || [[ "$response" == *"items"* ]]; then
        print_success "API –∫–≤–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ jq
        local count="unknown"
        if [[ "$response" == *"["* ]]; then
            count=$(echo "$response" | grep -o '"[^"]*"' | wc -l)
        fi
        print_info "–ù–∞–π–¥–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: $count"
        return 0
    elif [[ "$response" == *"PERMISSION_DENIED"* ]]; then
        print_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–≤–µ—Å—Ç–æ–≤"
        print_info "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–∞–≤–∞ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–∑–∂–µ"
        return 0
    else
        print_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API –∫–≤–µ—Å—Ç–æ–≤"
        print_info "–û—Ç–≤–µ—Ç: $response"
        print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
setup_admin_permissions() {
    print_status "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    if [ ! -f "$TOKEN_FILE" ]; then
        print_warning "–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤"
        return 1
    fi
    
    local token
    token=$(cat "$TOKEN_FILE")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API
    local response
    response=$(curl -s -X PUT "$API_BASE/users/me/permissions" \
        -H "Authorization: Bearer $token" \
        -H "Content-Type: application/json" \
        -d '{"canEditQuests": true, "canLockUsers": true}' 2>/dev/null || echo '{"error":"request_failed"}')
    
    if [[ "$response" == *"success"* ]] || [[ "$response" == *"updated"* ]]; then
        print_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        return 0
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: $response"
        print_info "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–∞–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤—Ä—É—á–Ω—É—é"
        return 0
    fi
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
cd "$(dirname "$0")"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    --help|-h)
        show_help
        exit 0
        ;;
    --stop)
        stop_server
        exit 0
        ;;
    --status)
        check_status
        exit 0
        ;;
    --logs)
        show_logs
        exit 0
        ;;
    --bg)
        BACKGROUND_MODE=true
        ;;
    *)
        BACKGROUND_MODE=false
        ;;
esac

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
echo -e "${CYAN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üöÄ QuestCity Backend                      ‚ïë"
echo "‚ïë                  Quick Start Automation                     ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

print_status "–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –∑–∞–ø—É—Å–∫..."

# 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
check_requirements

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
print_status "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
if [ ! -f "main.py" ] || [ ! -f "pyproject.toml" ]; then
    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã main.py –∏–ª–∏ pyproject.toml. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ questcity-backend"
    exit 1
fi
print_success "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"

# 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
print_status "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
stop_server

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
print_status "üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
if ! command -v python3 &> /dev/null; then
    print_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
    exit 1
fi
PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
print_success "Python –≤–µ—Ä—Å–∏—è: $PYTHON_VERSION"

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Poetry
print_status "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Poetry..."
if ! command -v poetry &> /dev/null; then
    print_warning "Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ pip..."
    python3 -m pip install poetry
    if ! command -v poetry &> /dev/null; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Poetry. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: https://python-poetry.org/docs/#installation"
        exit 1
    fi
fi
print_success "Poetry –Ω–∞–π–¥–µ–Ω"

# 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
print_status "üìö –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if [ -f "poetry.lock" ]; then
    poetry install --without dev 2>/dev/null || poetry install
else
    print_warning "poetry.lock –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    poetry install
fi
print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker (–¥–ª—è PostgreSQL)
print_status "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
    print_info "–ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ Docker..."
    docker-compose up -d database 2>/dev/null || print_warning "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å docker-compose"
    sleep 3
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
else
    print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é"
fi

# 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
print_status "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."
if [ -f "alembic.ini" ]; then
    export PYTHONPATH=src:$PYTHONPATH
    poetry run alembic current 2>/dev/null || print_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
else
    print_warning "alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–∏–≥—Ä–∞—Ü–∏–π"
fi

# 8. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
create_admin_if_needed

# 9. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# 10. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
print_status "üåê –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞..."

if [ "$BACKGROUND_MODE" = true ]; then
    # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    print_info "–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ..."
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞
    if [ -f "main.py" ]; then
        nohup poetry run python main.py > server_output.log 2>&1 &
    else
        print_error "main.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    SERVER_PID=$!
    echo $SERVER_PID > .server_pid
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    sleep 3
    if ps -p $SERVER_PID > /dev/null 2>&1; then
        print_success "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (PID: $SERVER_PID)"
        print_info "üìä –õ–æ–≥–∏: tail -f server_output.log"
        print_info "üìä –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./quick_start.sh --logs"
        print_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./quick_start.sh --stop"
        
        # 11. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        get_admin_token
        
        # 12. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        setup_admin_permissions
        
        # 13. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        test_admin_access
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ"
        exit 1
    fi
else
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print_info "–ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ..."
    print_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C"
    echo ""
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    if [ -f "main.py" ]; then
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
        nohup poetry run python main.py > server_output.log 2>&1 &
        TEMP_PID=$!
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        sleep 5
        get_admin_token
        setup_admin_permissions
        test_admin_access
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        kill $TEMP_PID 2>/dev/null || true
        sleep 2
        
        # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ..."
        poetry run python main.py
    else
        print_error "main.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
fi

# 13. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
echo ""
print_success "üéâ QuestCity Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
echo ""
echo -e "${YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:${NC}"
echo -e "  üìñ API Documentation: ${CYAN}http://localhost:8000/docs${NC}"
echo -e "  üîç ReDoc:             ${CYAN}http://localhost:8000/redoc${NC}"
echo -e "  ‚ù§Ô∏è  Health Check:      ${CYAN}http://localhost:8000/api/v1/health/${NC}"
echo -e "  üåê API v1:            ${CYAN}http://localhost:8000/api/v1/${NC}"
echo ""
echo -e "${YELLOW}üõ†Ô∏è  –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  ./quick_start.sh --status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
echo -e "  ./quick_start.sh --logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo -e "  ./quick_start.sh --stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
echo ""
if [ -f "$TOKEN_FILE" ]; then
    echo -e "${YELLOW}üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:${NC}"
    echo -e "  ‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $TOKEN_FILE"
    echo -e "  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: ./test_quests_api.sh"
    echo -e "  üë§ –ê–¥–º–∏–Ω: $ADMIN_EMAIL"
    echo ""
fi 