#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ activity.
–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤.
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/questcity")

async def init_activity_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ activity."""
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ activity...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ activity
            result = session.execute(text("SELECT COUNT(*) FROM activity"))
            count = result.scalar()
            
            if count > 0:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ activity —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
                return
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activities = [
                "Face verification",
                "Photo taking", 
                "QR code scanning",
                "GPS location check",
                "Text input",
                "Audio recording",
                "Video recording",
                "Object detection",
                "Gesture recognition",
                "Document scan"
            ]
            
            print(f"üìù –°–æ–∑–¥–∞–µ–º {len(activities)} –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...")
            
            for i, activity_name in enumerate(activities, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                existing = session.execute(
                    text("SELECT id FROM activity WHERE name = :name"),
                    {"name": activity_name}
                ).scalar()
                
                if existing:
                    print(f"  ‚è≠Ô∏è  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                session.execute(
                    text("INSERT INTO activity (id, name) VALUES (:id, :name)"),
                    {"id": i, "name": activity_name}
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity_name}' (ID: {i})")
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = session.execute(text("SELECT id, name FROM activity ORDER BY id"))
            activities = result.fetchall()
            
            print("\nüìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:")
            for activity_id, name in activities:
                print(f"  {activity_id:2d}: {name}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        session.rollback()
        raise
    finally:
        engine.dispose()

async def init_tool_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ tool."""
    
    print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ tool...")
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            result = session.execute(text("SELECT COUNT(*) FROM tool"))
            count = result.scalar()
            
            if count > 0:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ tool —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
                return
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            tools = [
                ("Rangefinder", "https://example.com/rangefinder.jpg"),
                ("QR Scanner", "https://example.com/qr-scanner.jpg"),
                ("Camera", "https://example.com/camera.jpg"),
                ("GPS Device", "https://example.com/gps.jpg"),
                ("Audio Recorder", "https://example.com/audio.jpg"),
                ("Video Camera", "https://example.com/video.jpg"),
                ("Document Scanner", "https://example.com/scanner.jpg"),
                ("Gesture Sensor", "https://example.com/gesture.jpg"),
                ("Object Detector", "https://example.com/detector.jpg"),
                ("Text Input Device", "https://example.com/text-input.jpg")
            ]
            
            print(f"üìù –°–æ–∑–¥–∞–µ–º {len(tools)} –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            
            for i, (tool_name, image_url) in enumerate(tools, 1):
                existing = session.execute(
                    text("SELECT id FROM tool WHERE name = :name"),
                    {"name": tool_name}
                ).scalar()
                
                if existing:
                    print(f"  ‚è≠Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})")
                    continue
                
                session.execute(
                    text("INSERT INTO tool (id, name, image) VALUES (:id, :name, :image)"),
                    {"id": i, "name": tool_name, "image": image_url}
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' (ID: {i})")
            
            session.commit()
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        session.rollback()
        raise
    finally:
        engine.dispose()

async def init_category_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ category."""
    
    print("\nüè∑Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ category...")
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        with SessionLocal() as session:
            result = session.execute(text("SELECT COUNT(*) FROM category"))
            count = result.scalar()
            
            if count > 0:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ category —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
                return
            
            categories = [
                ("Adventure", "https://example.com/adventure.jpg"),
                ("Mystery", "https://example.com/mystery.jpg"),
                ("Historical", "https://example.com/historical.jpg"),
                ("Nature", "https://example.com/nature.jpg"),
                ("Urban", "https://example.com/urban.jpg"),
                ("Cultural", "https://example.com/cultural.jpg"),
                ("Educational", "https://example.com/educational.jpg"),
                ("Entertainment", "https://example.com/entertainment.jpg")
            ]
            
            print(f"üìù –°–æ–∑–¥–∞–µ–º {len(categories)} –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            for i, (category_name, image_url) in enumerate(categories, 1):
                existing = session.execute(
                    text("SELECT id FROM category WHERE name = :name"),
                    {"name": category_name}
                ).scalar()
                
                if existing:
                    print(f"  ‚è≠Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})")
                    continue
                
                session.execute(
                    text("INSERT INTO category (id, name, image) VALUES (:id, :name, :image)"),
                    {"id": i, "name": category_name, "image": image_url}
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' (ID: {i})")
            
            session.commit()
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        session.rollback()
        raise
    finally:
        engine.dispose()

async def init_vehicle_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ vehicle."""
    
    print("\nüöó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ vehicle...")
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        with SessionLocal() as session:
            result = session.execute(text("SELECT COUNT(*) FROM vehicle"))
            count = result.scalar()
            
            if count > 0:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ vehicle —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
                return
            
            vehicles = [
                "On Foot",
                "Bicycle", 
                "Car",
                "Public Transport",
                "Motorcycle",
                "Scooter"
            ]
            
            print(f"üìù –°–æ–∑–¥–∞–µ–º {len(vehicles)} –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
            
            for i, vehicle_name in enumerate(vehicles, 1):
                existing = session.execute(
                    text("SELECT id FROM vehicle WHERE name = :name"),
                    {"name": vehicle_name}
                ).scalar()
                
                if existing:
                    print(f"  ‚è≠Ô∏è  –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç '{vehicle_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})")
                    continue
                
                session.execute(
                    text("INSERT INTO vehicle (id, name) VALUES (:id, :name)"),
                    {"id": i, "name": vehicle_name}
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç '{vehicle_name}' (ID: {i})")
            
            session.commit()
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}")
        session.rollback()
        raise
    finally:
        engine.dispose()

async def init_place_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ place."""
    
    print("\nüìç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ place...")
    
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        with SessionLocal() as session:
            result = session.execute(text("SELECT COUNT(*) FROM place"))
            count = result.scalar()
            
            if count > 0:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ place —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
                return
            
            places = [
                "City Center",
                "Park",
                "Museum",
                "Shopping Mall",
                "Restaurant",
                "Historical Site",
                "Beach",
                "Mountain",
                "Forest",
                "University"
            ]
            
            print(f"üìù –°–æ–∑–¥–∞–µ–º {len(places)} –±–∞–∑–æ–≤—ã—Ö –º–µ—Å—Ç...")
            
            for i, place_name in enumerate(places, 1):
                existing = session.execute(
                    text("SELECT id FROM place WHERE name = :name"),
                    {"name": place_name}
                ).scalar()
                
                if existing:
                    print(f"  ‚è≠Ô∏è  –ú–µ—Å—Ç–æ '{place_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing})")
                    continue
                
                session.execute(
                    text("INSERT INTO place (id, name) VALUES (:id, :name)"),
                    {"id": i, "name": place_name}
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–µ—Å—Ç–æ '{place_name}' (ID: {i})")
            
            session.commit()
            print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Å—Ç: {e}")
        session.rollback()
        raise
    finally:
        engine.dispose()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QuestCity...")
    print("=" * 60)
    
    try:
        await init_activity_data()
        await init_tool_data()
        await init_category_data()
        await init_vehicle_data()
        await init_place_data()
        
        print("\n" + "=" * 60)
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
