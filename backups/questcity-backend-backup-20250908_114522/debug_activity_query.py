import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text, select
from src.db.models.quest.point import Activity

async def debug_activity_query():
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ activity...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–ê–ö–£–Æ –ñ–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ FastAPI
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost/questcity',
            echo=True
        )
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É...")
            result = await session.execute(text("SELECT current_schema()"))
            schema = result.scalar()
            print(f"    –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞: {schema}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ö–µ–º—ã
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ö–µ–º—ã...")
            result = await session.execute(text("SELECT schema_name FROM information_schema.schemata"))
            schemas = result.fetchall()
            print(f"    –í—Å–µ —Å—Ö–µ–º—ã: {[s[0] for s in schemas]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ...")
            result = await session.execute(text("""
                SELECT table_name, table_schema 
                FROM information_schema.tables 
                WHERE table_name = 'activity'
            """))
            table_info = result.fetchone()
            print(f"    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ: {table_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity –≤ —Å—Ö–µ–º–µ public
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity –≤ —Å—Ö–µ–º–µ public...")
            result = await session.execute(text("""
                SELECT table_name, table_schema 
                FROM information_schema.tables 
                WHERE table_name = 'activity' AND table_schema = 'public'
            """))
            public_table_info = result.fetchone()
            print(f"    –¢–∞–±–ª–∏—Ü–∞ –≤ public: {public_table_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public...")
            result = await session.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name
            """))
            public_tables = result.fetchall()
            print(f"    –¢–∞–±–ª–∏—Ü—ã –≤ public: {[t[0] for t in public_tables]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å activity —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –≤ —Å—Ö–µ–º–µ public
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å activity –≤ —Å—Ö–µ–º–µ public...")
            result = await session.execute(text("SELECT * FROM public.activity WHERE id = 1"))
            public_row = result.fetchone()
            print(f"    –ó–∞–ø–∏—Å—å –≤ public.activity: {public_row}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å activity —á–µ—Ä–µ–∑ SQLAlchemy
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å activity —á–µ—Ä–µ–∑ SQLAlchemy...")
            stmt = select(Activity).where(Activity.id == 1)
            result = await session.execute(stmt)
            activity = result.scalar_one_or_none()
            print(f"    SQLAlchemy —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º __tablename__ –º–æ–¥–µ–ª–∏
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º __tablename__ –º–æ–¥–µ–ª–∏ Activity...")
            print(f"    __tablename__: {Activity.__tablename__}")
            print(f"    __table__.schema: {Activity.__table__.schema}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ session.get()
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ session.get()...")
            try:
                activity_get = await session.get(Activity, 1)
                print(f"    session.get() —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity_get}")
            except Exception as e:
                print(f"    session.get() –æ—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ activity...")
    await debug_activity_query()

if __name__ == "__main__":
    asyncio.run(main())

























