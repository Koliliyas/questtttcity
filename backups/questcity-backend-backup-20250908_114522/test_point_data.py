#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –∫–≤–µ—Å—Ç–∞
"""

import asyncio
import asyncpg
import os
import requests
import time
from dotenv import load_dotenv

load_dotenv()

def get_admin_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('.admin_token', 'r') as f:
            token = f.read().strip()
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:50]}...")
            return token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def create_test_quest_with_specific_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ type_id –∏ tool_id"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
        quest_query = """
        INSERT INTO quest (name, description, image, category_id, level, timeframe, 
                          "group", cost, reward, pay_extra, is_subscription, vehicle_id,
                          mentor_preference, auto_accrual, milage, place_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
        RETURNING id
        """
        
        quest_result = await conn.fetchrow(quest_query, 
            f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ {int(time.time())}",  # name
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞",     # description
            "test_image.jpg",               # image
            1,                              # category_id
            "EASY",                         # level (enum)
            "ONE_HOUR",                     # timeframe (enum)
            "ALONE",                        # group (enum)
            100,                            # cost
            200,                            # reward
            0,                              # pay_extra (integer)
            False,                          # is_subscription
            1,                              # vehicle_id
            "test_mentor",                  # mentor_preference
            True,                           # auto_accrual
            "UP_TO_TEN",                    # milage (enum)
            1                               # place_id
        )
        
        quest_id = quest_result['id']
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å ID: {quest_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ type_id –∏ tool_id
        point_query = """
        INSERT INTO point (name_of_location, description, "order", type_id, tool_id, 
                          file, is_divide, quest_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        RETURNING id
        """
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID: type_id=4 (Scan Qr-code), tool_id=5 (Mile orbital radar)
        point_result = await conn.fetchrow(point_query,
            "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏",      # name_of_location
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏",       # description
            1,                              # order
            4,                              # type_id (Scan Qr-code)
            5,                              # tool_id (Mile orbital radar)
            "test_file.txt",                # file
            False,                          # is_divide
            quest_id                        # quest_id
        )
        
        point_id = point_result['id']
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å ID: {point_id}")
        print(f"   - type_id: 4 (Scan Qr-code)")
        print(f"   - tool_id: 5 (Mile orbital radar)")
        
        # –°–æ–∑–¥–∞–µ–º place_settings –¥–ª—è —Ç–æ—á–∫–∏
        place_settings_query = """
        INSERT INTO place_settings (longitude, latitude, detections_radius, height, 
                                   random_occurrence, interaction_inaccuracy, part, point_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        """
        
        await conn.execute(place_settings_query,
            55.7558,                        # longitude
            37.6176,                        # latitude
            100.0,                          # detections_radius
            10.0,                           # height
            0.5,                            # random_occurrence
            5.0,                            # interaction_inaccuracy
            1,                              # part
            point_id                        # point_id
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã place_settings –¥–ª—è —Ç–æ—á–∫–∏ {point_id}")
        
        await conn.close()
        return quest_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞: {e}")
        return None

def test_get_quest_data(quest_id, token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
    
    BASE_URL = "http://localhost:8000/api/v1"
    
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞ {quest_id} —á–µ—Ä–µ–∑ API")
    print(f"üì° URL: {BASE_URL}/quests/admin/{quest_id}")
    print("=" * 60)
    
    try:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        response = requests.get(f"{BASE_URL}/quests/admin/{quest_id}", headers=headers)
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ SUCCESS: –î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã!")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            print(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
            print(f"   - –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫
            points = data.get('points', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: {len(points)}")
            
            for i, point in enumerate(points):
                print(f"\nüîç –¢–æ—á–∫–∞ {i + 1}:")
                print(f"   - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏: {point}")
                print(f"   - id: {point.get('id')}")
                print(f"   - name: {point.get('name')}")
                print(f"   - order: {point.get('order')}")
                print(f"   - type_id: {point.get('type_id')}")
                print(f"   - tool_id: {point.get('tool_id')}")
                print(f"   - places: {len(point.get('places', []))}")
            
            return True
        else:
            print(f"‚ùå Got {response.status_code}: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: Cannot connect to server")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

async def check_quest_in_database(quest_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ {quest_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç
        quest = await conn.fetchrow("SELECT id, name FROM quest WHERE id = $1", quest_id)
        if quest:
            print(f"‚úÖ –ö–≤–µ—Å—Ç –Ω–∞–π–¥–µ–Ω: {quest['name']}")
        else:
            print(f"‚ùå –ö–≤–µ—Å—Ç {quest_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await conn.close()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞
        points = await conn.fetch("""
            SELECT id, name_of_location, "order", type_id, tool_id, description
            FROM point 
            WHERE quest_id = $1 
            ORDER BY "order"
        """, quest_id)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫ –≤ –ë–î: {len(points)}")
        
        for i, point in enumerate(points):
            print(f"\nüîç –¢–æ—á–∫–∞ {i + 1} –≤ –ë–î:")
            print(f"   - id: {point['id']}")
            print(f"   - name_of_location: {point['name_of_location']}")
            print(f"   - order: {point['order']}")
            print(f"   - type_id: {point['type_id']}")
            print(f"   - tool_id: {point['tool_id']}")
            print(f"   - description: {point['description']}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –¢–û–ß–ï–ö –ö–í–ï–°–¢–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    quest_id = await create_test_quest_with_specific_data()
    if not quest_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not await check_quest_in_database(quest_id):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    if not test_get_quest_data(quest_id, token):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API")
        return
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")

if __name__ == "__main__":
    asyncio.run(main())
