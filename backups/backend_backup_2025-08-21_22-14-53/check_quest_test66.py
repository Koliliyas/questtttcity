#!/usr/bin/env python3
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_quest_test66():
    print("üîç –ò—â–µ–º –∫–≤–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'test66'...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity_db
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–≤–µ—Å—Ç–∞ 'test66'...")

            # –ò—â–µ–º –∫–≤–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º test66
            result = await sess.execute(text("""
                SELECT * FROM quest WHERE name = 'test66'
            """))
            
            quest = result.fetchone()
            if quest:
                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω –∫–≤–µ—Å—Ç 'test66':")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                columns = result.keys()
                
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞
                for i, column in enumerate(columns):
                    value = quest[i]
                    print(f"      {column}: {value}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if quest.category_id:
                    cat_result = await sess.execute(text("""
                        SELECT name FROM category WHERE id = :category_id
                    """), {"category_id": quest.category_id})
                    
                    cat_row = cat_result.fetchone()
                    if cat_row:
                        print(f"      category_name: {cat_row[0]}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–∞—Ö –∫–≤–µ—Å—Ç–∞
                points_result = await sess.execute(text("""
                    SELECT * FROM point WHERE quest_id = :quest_id
                """), {"quest_id": quest.id})
                
                points = points_result.fetchall()
                if points:
                    print(f"\n      üìç –¢–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞ ({len(points)}):")
                    for j, point in enumerate(points):
                        print(f"        –¢–æ—á–∫–∞ {j+1}:")
                        point_columns = points_result.keys()
                        for k, col in enumerate(point_columns):
                            print(f"          {col}: {point[k]}")
                else:
                    print(f"      üìç –¢–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞: –Ω–µ—Ç")
                
            else:
                print("    ‚ùå –ö–≤–µ—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'test66' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                all_quests_result = await sess.execute(text("""
                    SELECT id, name FROM quest ORDER BY id
                """))
                
                all_quests = all_quests_result.fetchall()
                print(f"\n    üìä –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(all_quests)}")
                if all_quests:
                    print("    üîç –í—Å–µ –∫–≤–µ—Å—Ç—ã:")
                    for q in all_quests:
                        print(f"      - ID: {q[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{q[1]}'")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 'test66'...")
    await check_quest_test66()

if __name__ == "__main__":
    asyncio.run(main())
