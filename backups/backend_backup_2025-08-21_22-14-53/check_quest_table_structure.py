import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_quest_table_structure():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity_db
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            result = await sess.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            
            tables = result.fetchall()
            print(f"    üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"      - {table[0]}")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest
            result = await sess.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = 'quest' AND table_schema = 'public'
                ORDER BY ordinal_position
            """))
            
            columns = result.fetchall()
            if columns:
                print(f"    üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã quest:")
                for col in columns:
                    print(f"      - {col[0]}: {col[1]} (nullable: {col[2]}, default: {col[3]})")
            else:
                print("    ‚ùå –¢–∞–±–ª–∏—Ü–∞ quest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ quest...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ quest
            try:
                result = await sess.execute(text("SELECT * FROM quest LIMIT 5"))
                quests = result.fetchall()
                print(f"    üìã –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ quest:")
                for quest in quests:
                    print(f"      - {quest}")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º...")

            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            result = await sess.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name LIKE '%quest%'
                ORDER BY table_name
            """))
            
            quest_like_tables = result.fetchall()
            print(f"    üìã –¢–∞–±–ª–∏—Ü—ã —Å 'quest' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:")
            for table in quest_like_tables:
                print(f"      - {table[0]}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã quest...")
    await check_quest_table_structure()

if __name__ == "__main__":
    asyncio.run(main())











