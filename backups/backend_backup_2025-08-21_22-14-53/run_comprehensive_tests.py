#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ comprehensive integration —Ç–µ—Å—Ç–æ–≤ QuestCity Backend API.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ error scenarios
- –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- Performance —Ç–µ—Å—Ç—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_comprehensive_tests.py              # –í—Å–µ —Ç–µ—Å—Ç—ã
    python run_comprehensive_tests.py --quick      # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ CRUD —Ç–µ—Å—Ç—ã
    python run_comprehensive_tests.py --regression # –¢–æ–ª—å–∫–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
"""

import subprocess
import sys
import os
import argparse
from typing import List


def check_prerequisites() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω
    try:
        import requests
        response = requests.get("http://localhost:8000/api/v1/health/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if os.path.exists(".admin_token"):
        print("‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./quick_start.sh")
        return False
    
    return True


def run_pytest_command(args: List[str]) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pytest —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏."""
    cmd = ["poetry", "run", "pytest"] + args
    
    print(f"üß™ –ó–∞–ø—É—Å–∫: {' '.join(cmd)}")
    print("=" * 60)
    
    try:
        result = subprocess.run(cmd, cwd=".", capture_output=False)
        return result.returncode
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1


def run_all_tests() -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ comprehensive —Ç–µ—Å—Ç—ã."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –í–°–ï–• comprehensive integration —Ç–µ—Å—Ç–æ–≤")
    
    args = [
        "tests/",
        "-v",
        "--tb=short",
        "--color=yes",
        "-x"  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
    ]
    
    return run_pytest_command(args)


def run_quick_tests() -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ CRUD —Ç–µ—Å—Ç—ã."""
    print("‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö CRUD —Ç–µ—Å—Ç–æ–≤")
    
    args = [
        "tests/test_quest_references_crud.py",
        "-v",
        "--tb=short", 
        "--color=yes",
        "-k", "test_get_ or test_create_.*_success"  # –¢–æ–ª—å–∫–æ GET –∏ —É—Å–ø–µ—à–Ω—ã–µ CREATE —Ç–µ—Å—Ç—ã
    ]
    
    return run_pytest_command(args)


def run_regression_tests() -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã."""
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    args = [
        "tests/",
        "-v",
        "--tb=short",
        "--color=yes", 
        "-k", "regression or TestRegressionScenarios"
    ]
    
    return run_pytest_command(args)


def run_validation_tests() -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    print("‚úÖ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    args = [
        "tests/",
        "-v",
        "--tb=short",
        "--color=yes",
        "-k", "validation or TestDataValidationErrors"
    ]
    
    return run_pytest_command(args)


def run_performance_tests() -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã."""
    print("üìä –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤")
    
    args = [
        "tests/test_error_scenarios.py::TestPerformanceAndLimits",
        "-v",
        "--tb=short",
        "--color=yes"
    ]
    
    return run_pytest_command(args)


def generate_test_report() -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = [
        "tests/",
        "-v",
        "--tb=long",
        "--color=yes",
        "--durations=10"  # –ü–æ–∫–∞–∑–∞—Ç—å 10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    ]
    
    return run_pytest_command(args)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="Comprehensive Integration Tests –¥–ª—è QuestCity Backend API"
    )
    
    parser.add_argument(
        "--quick", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ CRUD —Ç–µ—Å—Ç—ã"
    )
    
    parser.add_argument(
        "--regression",
        action="store_true", 
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    )
    
    parser.add_argument(
        "--validation",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "--performance",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ performance —Ç–µ—Å—Ç—ã"
    )
    
    parser.add_argument(
        "--report",
        action="store_true",
        help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"
    )
    
    parser.add_argument(
        "--skip-check",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
    )
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üß™ COMPREHENSIVE INTEGRATION TESTS - QuestCity Backend API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not args.skip_check:
        if not check_prerequisites():
            print("\n‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./quick_start.sh")
            return 1
        print()
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if args.quick:
        return run_quick_tests()
    elif args.regression:
        return run_regression_tests() 
    elif args.validation:
        return run_validation_tests()
    elif args.performance:
        return run_performance_tests()
    elif args.report:
        return generate_test_report()
    else:
        return run_all_tests()


if __name__ == "__main__":
    try:
        exit_code = main()
        
        if exit_code == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: {exit_code})")
        
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 