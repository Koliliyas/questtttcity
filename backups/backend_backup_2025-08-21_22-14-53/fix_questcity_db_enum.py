import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def fix_questcity_db_enum():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º enum grouptype –≤ –±–∞–∑–µ questcity_db...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity_db
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity_db',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è enum grouptype...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            enum_values = result.fetchall()
            print(f"    üìã –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {[row[0] for row in enum_values]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE'
            has_alone = any('ALONE' in str(row[0]) for row in enum_values)
            
            if not has_alone:
                print("  üîß –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –≤ enum...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –≤ enum
                await sess.execute(text("""
                    ALTER TYPE grouptype ADD VALUE 'ALONE'
                """))
                print("    ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ enum")
            else:
                print("    ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' —É–∂–µ –µ—Å—Ç—å –≤ enum")

            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await sess.commit()
            print("  ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            final_enum_values = result.fetchall()
            print(f"    üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum: {[row[0] for row in final_enum_values]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE'
            final_has_alone = any('ALONE' in str(row[0]) for row in final_enum_values)
            print(f"    ‚úÖ –ï—Å—Ç—å –ª–∏ 'ALONE' –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {final_has_alone}")

            if final_has_alone:
                print("\n  üéâ Enum grouptype –≤ questcity_db –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
                print("  üí° –¢–µ–ø–µ—Ä—å FastAPI –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("\n  ‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º enum –≤ questcity_db...")
    await fix_questcity_db_enum()

if __name__ == "__main__":
    asyncio.run(main())











