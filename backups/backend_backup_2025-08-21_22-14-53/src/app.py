import contextlib
from typing import AsyncIterator

from aioinject.ext.fastapi import AioInjectMiddleware
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.middleware.cors import CORSMiddleware
from fastapi.requests import Request
from fastapi.responses import JSONResponse
from fastapi_pagination import add_pagination
from starlette.middleware.sessions import SessionMiddleware

from src.api.api_router import router_v1
from src.api.exceptions import (
    BaseHTTPError, 
    ServerHTTPError,
    FileTooLargeHTTPError,
    InvalidFileTypeHTTPError,
    SuspiciousFileContentHTTPError,
    VirusDetectedHTTPError,
    EmptyFileHTTPError,
    CorruptedFileHTTPError,
    ZipBombHTTPError,
    UnsafeFilenameHTTPError,
    FileValidationHTTPError,
    InvalidSearchTermHTTPError,
    SuspiciousSearchHTTPError,
    SearchTermTooLongHTTPError,
)
from src.core.di.container import create_container
from src.logger import get_logger
from src.settings import ApplicationSettings, get_settings

logger = get_logger(__name__)


@contextlib.asynccontextmanager
async def _lifespan(
    app: FastAPI,  # noqa: ARG001 - required by lifespan protocol
) -> AsyncIterator[None]:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JWT –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QuestCity Backend...")
    
    try:
        from src.core.authentication.jwt_keys import ensure_jwt_keys_exist, JWTKeysError
        from src.core.resilience.health_check import get_health_checker, register_default_health_checks
        from src.settings import get_settings, AuthJWTSettings
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
        jwt_settings = get_settings(AuthJWTSettings)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º JWT –∫–ª—é—á–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        ensure_jwt_keys_exist(
            private_key_path=jwt_settings.private_key_path,
            public_key_path=jwt_settings.public_key_path,
            key_size=2048
        )
        
        logger.info("‚úÖ JWT –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Health Checker
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Health Checker...")
        health_checker = get_health_checker()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ health checks
        register_default_health_checks()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º health checks
        await health_checker.start()
        
        logger.info("‚úÖ Health Checker –∑–∞–ø—É—â–µ–Ω")
        
    except JWTKeysError as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JWT –∫–ª—é—á–µ–π: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    async with contextlib.aclosing(create_container()):
        logger.info("üöÄ QuestCity Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        yield
        
        # Graceful shutdown
        logger.info("üõë QuestCity Backend –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Health Checker
            health_checker = get_health_checker()
            await health_checker.stop()
            logger.info("‚úÖ Health Checker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Health Checker: {e}")
        
        logger.info("‚úÖ QuestCity Backend –∑–∞–≤–µ—Ä—à–µ–Ω")


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
from src.core.exceptions.handlers import http_exception_handler, file_validation_exception_handler


async def search_security_exception_handler(
    request: Request,  # noqa: ARG001
    exc: ValueError,
) -> JSONResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞."""
    
    exc_message = str(exc)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ FuzzySearchService
    if any(keyword in exc_message for keyword in [
        'Search term', 'similarity limit', 'suspicious pattern', 'too long', 'control characters'
    ]):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
        if 'too long' in exc_message:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏–Ω—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            import re
            match = re.search(r'(\d+) characters', exc_message)
            length = int(match.group(1)) if match else 0
            http_exc = SearchTermTooLongHTTPError(length, 1000)
        elif 'suspicious pattern' in exc_message:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            match = re.search(r"pattern: '([^']+)'", exc_message)
            pattern = match.group(1) if match else 'unknown'
            http_exc = SuspiciousSearchHTTPError(pattern)
        else:
            # –û–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            http_exc = InvalidSearchTermHTTPError(exc_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        logger.warning(f"Search security violation: {exc}", extra={
            'event': 'search_security_violation',
            'error_message': exc_message,
            'client_ip': request.client.host if request.client else 'unknown',
            'user_agent': request.headers.get('user-agent', 'unknown'),
            'url': str(request.url),
        })
        
        return JSONResponse(
            content=jsonable_encoder(http_exc.error_schema.model_dump(by_alias=True)),
            status_code=http_exc.status_code,
        )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    raise exc


async def exception_handler(
    request: Request,
    exc: Exception,
) -> JSONResponse:
    logger.exception(exc)
    exc = ServerHTTPError()
    return JSONResponse(
        content=jsonable_encoder(exc.error_schema.model_dump(by_alias=True)),
        status_code=exc.status_code,
    )


def create_app() -> FastAPI:
    app = FastAPI(
        lifespan=_lifespan,
        title="Questcity",
        docs_url="/api/docs",
        redoc_url="/api/redoc",
    )
    settings: ApplicationSettings = get_settings(ApplicationSettings)
    add_pagination(app)
    app.include_router(
        router=router_v1,
        prefix="/api",
    )

    app.exception_handlers[BaseHTTPError] = http_exception_handler
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
    from src.core.file_validation.exceptions import FileValidationError
    app.exception_handlers[FileValidationError] = file_validation_exception_handler
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    app.exception_handlers[ValueError] = search_security_exception_handler
    
    app.exception_handlers[Exception] = exception_handler

    app.add_middleware(SessionMiddleware, secret_key=settings.session_secret_key)
    app.add_middleware(AioInjectMiddleware, container=create_container())
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.allow_origins,
        allow_credentials=True,
        allow_origin_regex=settings.allow_origin_regex,
        allow_methods=settings.allow_methods,
        allow_headers=settings.allow_headers,
    )

    return app


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è uvicorn
app = create_app()
