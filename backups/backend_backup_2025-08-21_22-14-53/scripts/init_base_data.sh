#!/bin/bash

# QuestCity Backend - Base Data Initialization Script
# –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ REST API
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./scripts/init_base_data.sh
#   ./scripts/init_base_data.sh --force

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="http://localhost:8000/api/v1"
TOKEN_FILE=".admin_token"
FORCE_MODE=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$1" == "--force" ]]; then
    FORCE_MODE=true
fi

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
api_request() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    local content_type="${4:-application/json}"
    
    local auth_header=""
    if [ -f "$TOKEN_FILE" ]; then
        ACCESS_TOKEN=$(cat "$TOKEN_FILE")
        auth_header="-H \"Authorization: Bearer $ACCESS_TOKEN\""
    else
        print_error "–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ $TOKEN_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    if [ "$method" = "GET" ]; then
        eval curl -s -X GET \"$API_BASE$endpoint\" $auth_header
    elif [ "$method" = "POST" ]; then
        eval curl -s -X POST \"$API_BASE$endpoint\" \
            -H \"Content-Type: $content_type\" \
            $auth_header \
            -d \'$data\'
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
create_activities() {
    print_status "üéØ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π..."
    
    local activities=(
        "Face verification"
        "Photo taking"
        "QR code scanning"
        "GPS location check"
        "Text input"
        "Audio recording"
        "Video recording"
        "Object detection"
        "Gesture recognition"
        "Document scan"
    )
    
    local created=0
    local skipped=0
    
    for activity in "${activities[@]}"; do
        local response=$(api_request "POST" "/quests/types/" "{\"name\": \"$activity\"}")
        
        if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
            print_success "–°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: $activity"
            ((created++))
        elif [[ "$response" == *"already exists"* ]] || [[ "$response" == *"unique constraint"* ]]; then
            print_info "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '$activity' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            ((skipped++))
        else
            print_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '$activity': $response"
        fi
    done
    
    print_info "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–æ $created, –ø—Ä–æ–ø—É—â–µ–Ω–æ $skipped"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
create_tools() {
    print_status "üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ base64 (1x1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å PNG)
    local placeholder_image="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
    
    local tools=(
        "Smartphone"
        "Camera"
        "QR Scanner"
        "GPS Tracker"
        "Voice Recorder"
        "Compass"
        "Measuring Tape"
        "Flashlight"
        "Binoculars"
        "Notebook"
    )
    
    local created=0
    local skipped=0
    
    for tool_name in "${tools[@]}"; do
        local response=$(api_request "POST" "/quests/tools/" "{\"name\": \"$tool_name\", \"image\": \"$placeholder_image\"}")
        
        if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
            print_success "–°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: $tool_name"
            ((created++))
        elif [[ "$response" == *"already exists"* ]] || [[ "$response" == *"unique constraint"* ]]; then
            print_info "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '$tool_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            ((skipped++))
        else
            print_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '$tool_name': $response"
        fi
    done
    
    print_info "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ $created, –ø—Ä–æ–ø—É—â–µ–Ω–æ $skipped"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
create_vehicles() {
    print_status "üöó –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤..."
    
    local vehicles=(
        "Walking"
        "Bicycle"
        "Car"
        "Public Transport"
        "Motorcycle"
        "Scooter"
        "Boat"
        "Train"
        "Bus"
        "Metro"
    )
    
    local created=0
    local skipped=0
    
    for vehicle in "${vehicles[@]}"; do
        local response=$(api_request "POST" "/quests/vehicles/" "{\"name\": \"$vehicle\"}")
        
        if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
            print_success "–°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: $vehicle"
            ((created++))
        elif [[ "$response" == *"already exists"* ]] || [[ "$response" == *"unique constraint"* ]]; then
            print_info "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç '$vehicle' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            ((skipped++))
        else
            print_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ '$vehicle': $response"
        fi
    done
    
    print_info "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: —Å–æ–∑–¥–∞–Ω–æ $created, –ø—Ä–æ–ø—É—â–µ–Ω–æ $skipped"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
create_categories() {
    print_status "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π..."
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ base64 (1x1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å PNG)
    local placeholder_image="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
    
    local categories=(
        "Adventure"
        "Culture"
        "Sport"
        "Education"
        "Entertainment"
        "Business"
        "Travel"
        "Technology"
        "Nature"
        "Social"
    )
    
    local created=0
    local skipped=0
    
    for category_name in "${categories[@]}"; do
        local response=$(api_request "POST" "/quests/categories/" "{\"name\": \"$category_name\", \"image\": \"$placeholder_image\"}")
        
        if [[ "$response" == *"id"* ]] && [[ "$response" != *"error"* ]] && [[ "$response" != *"detail"* ]]; then
            print_success "–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: $category_name"
            ((created++))
        elif [[ "$response" == *"already exists"* ]] || [[ "$response" == *"unique constraint"* ]]; then
            print_info "–ö–∞—Ç–µ–≥–æ—Ä–∏—è '$category_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            ((skipped++))
        else
            print_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '$category_name': $response"
        fi
    done
    
    print_info "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: —Å–æ–∑–¥–∞–Ω–æ $created, –ø—Ä–æ–ø—É—â–µ–Ω–æ $skipped"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    local health_response=$(curl -s "$API_BASE/health/" || echo "error")
    
    if [[ "$health_response" == *"healthy"* ]] || [[ "$health_response" == *"ok"* ]]; then
        print_success "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./quick_start.sh"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
check_auth() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
    
    if [ ! -f "$TOKEN_FILE" ]; then
        print_error "–§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ $TOKEN_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ ./quick_start.sh –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
        return 1
    fi
    
    local auth_response=$(api_request "GET" "/quests/")
    
    if [[ "$auth_response" == *"[{"* ]] || [[ "$auth_response" == *"id"* ]]; then
        print_success "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: $auth_response"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                üöÄ QuestCity Base Data Init                   ‚ïë"
    echo "‚ïë            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö          ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo
    
    if [ "$FORCE_MODE" = true ]; then
        print_warning "–†–µ–∂–∏–º FORCE: –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_server || exit 1
    check_auth || exit 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    create_activities
    create_tools  
    create_vehicles
    create_categories
    
    echo
    print_success "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    print_info "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–≤–µ—Å—Ç—ã —á–µ—Ä–µ–∑ API"
}

# –ó–∞–ø—É—Å–∫
main "$@" 