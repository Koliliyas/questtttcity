import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def fix_database_schema():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ questcity
    engine = create_async_engine(
        'postgresql+asyncpg://postgres:postgres@localhost/questcity',
        echo=False
    )

    session = sessionmaker(
        engine,
        class_=AsyncSession,
        expire_on_commit=False
    )

    try:
        async with session() as sess:
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ enum grouptype
            result = await sess.execute(text("""
                SELECT typname, typtype
                FROM pg_type
                WHERE typname = 'grouptype'
            """))
            
            enum_exists = result.fetchone()
            
            if not enum_exists:
                print("  üîß –°–æ–∑–¥–∞–µ–º enum grouptype...")
                
                # –°–æ–∑–¥–∞–µ–º enum grouptype
                await sess.execute(text("""
                    CREATE TYPE grouptype AS ENUM ('ALONE', 'TWO', 'THREE', 'FOUR')
                """))
                print("    ‚úÖ Enum grouptype —Å–æ–∑–¥–∞–Ω")
            else:
                print("    ‚úÖ Enum grouptype —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è group –≤ —Ç–∞–±–ª–∏—Ü–µ quest
            result = await sess.execute(text("""
                SELECT column_name, data_type, udt_name
                FROM information_schema.columns
                WHERE table_name = 'quest' AND column_name = 'group'
            """))
            
            column_info = result.fetchone()
            
            if column_info and column_info[1] != 'USER-DEFINED':
                print("  üîß –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—è 'group' –Ω–∞ enum...")
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—è group –Ω–∞ enum grouptype
                await sess.execute(text("""
                    ALTER TABLE quest 
                    ALTER COLUMN "group" TYPE grouptype 
                    USING "group"::grouptype
                """))
                print("    ‚úÖ –¢–∏–ø –ø–æ–ª—è 'group' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ enum")
            else:
                print("    ‚úÖ –ü–æ–ª–µ 'group' —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ enum
            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            enum_values = result.fetchall()
            print(f"    üìã –ó–Ω–∞—á–µ–Ω–∏—è enum grouptype: {[row[0] for row in enum_values]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE'
            has_alone = any('ALONE' in str(row[0]) for row in enum_values)
            
            if not has_alone:
                print("  üîß –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –≤ enum...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –≤ enum
                await sess.execute(text("""
                    ALTER TYPE grouptype ADD VALUE 'ALONE'
                """))
                print("    ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ enum")
            else:
                print("    ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 'ALONE' —É–∂–µ –µ—Å—Ç—å –≤ enum")

            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await sess.commit()
            print("  ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            print("\n  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            result = await sess.execute(text("""
                SELECT column_name, data_type, udt_name
                FROM information_schema.columns
                WHERE table_name = 'quest' AND column_name = 'group'
            """))
            
            final_column_info = result.fetchone()
            print(f"    üìã –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è 'group': {final_column_info}")

            result = await sess.execute(text("""
                SELECT enumlabel 
                FROM pg_enum 
                WHERE enumtypid = (
                    SELECT oid 
                    FROM pg_type 
                    WHERE typname = 'grouptype'
                )
                ORDER BY enumsortorder
            """))
            
            final_enum_values = result.fetchall()
            print(f"    üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum: {[row[0] for row in final_enum_values]}")

            print("\n  üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await fix_database_schema()

if __name__ == "__main__":
    asyncio.run(main())











