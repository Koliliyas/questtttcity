plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.questicity.questicityapp"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    // Чтение первого файла с ключами
    def releaseKeystoreProperties = new Properties()
    def releaseKeystorePropertiesFile = rootProject.file("key_upload.properties")
    if (releaseKeystorePropertiesFile.exists()) {
        releaseKeystoreProperties.load(new FileInputStream(releaseKeystorePropertiesFile))
    }

    // Чтение второго файла с ключами
    def debugKeystoreProperties = new Properties()
    def debugKeystorePropertiesFile = rootProject.file("key_debug.properties")
    if (debugKeystorePropertiesFile.exists()) {
        debugKeystoreProperties.load(new FileInputStream(debugKeystorePropertiesFile))
    }

    defaultConfig {
        applicationId "com.questicity.questicityapp"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            if (releaseKeystoreProperties['storeFile'] != null && file(releaseKeystoreProperties['storeFile']).exists()) {
                storeFile file(releaseKeystoreProperties['storeFile'])
                keyAlias releaseKeystoreProperties['keyAlias']
                keyPassword releaseKeystoreProperties['keyPassword']
                storePassword releaseKeystoreProperties['storePassword']
            }
        }
        debug {
            if (debugKeystoreProperties['storeFile'] != null && file(debugKeystoreProperties['storeFile']).exists()) {
                storeFile file(debugKeystoreProperties['storeFile'])
                keyAlias debugKeystoreProperties['keyAlias']
                keyPassword debugKeystoreProperties['keyPassword']
                storePassword debugKeystoreProperties['storePassword']
            }
        }
    }
    
    buildTypes {
        release {
            if (signingConfigs.release.storeFile != null) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            shrinkResources false
        }
        debug {
            if (signingConfigs.debug.storeFile != null) {
                signingConfig signingConfigs.debug
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
