#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–∫–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity
"""
import psycopg2
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr'
}

def check_point_related_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ—á–∫–∞–º–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–∫–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Ç–æ—á–∫–∞–º–∏
        print("\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–∫–∞–º–∏:")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND (table_name LIKE '%point%' OR table_name LIKE '%place%')
            ORDER BY table_name
        """)
        point_tables = cursor.fetchall()
        
        if point_tables:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–∫–∞–º–∏: {len(point_tables)}")
            for table in point_tables:
                print(f"  - {table[0]}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ—á–∫–∞–º–∏, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã point
        print("\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã point:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'point' 
            ORDER BY ordinal_position
        """)
        point_columns = cursor.fetchall()
        
        if point_columns:
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã point:")
            for col in point_columns:
                print(f"  - {col[0]}: {col[1]} (nullable: {col[2]})")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ point –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã place
        print("\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã place:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'place' 
            ORDER BY ordinal_position
        """)
        place_columns = cursor.fetchall()
        
        if place_columns:
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã place:")
            for col in place_columns:
                print(f"  - {col[0]}: {col[1]} (nullable: {col[2]})")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ place –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ point
        print("\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ point:")
        cursor.execute("SELECT COUNT(*) FROM point")
        point_count = cursor.fetchone()[0]
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ point: {point_count}")

        if point_count > 0:
            cursor.execute("SELECT * FROM point LIMIT 3")
            points = cursor.fetchall()
            print(f"‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ point:")
            for point in points:
                print(f"  - {point}")

        cursor.close()
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    success = check_point_related_tables()
    
    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ—á–∫–∞–º–∏")

if __name__ == "__main__":
    main()

