#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é
"""
import psycopg2
import json
from typing import Dict, List, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'questcity',
    'user': 'postgres',
    'password': 'postgres'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'sslmode': 'disable'
}

def get_connection(config: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**config)
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def get_table_data(conn, table_name: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM {table_name} ORDER BY id")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        columns = [desc[0] for desc in cursor.description]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        rows = cursor.fetchall()
        data = []
        for row in rows:
            row_dict = {}
            for i, value in enumerate(row):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                if isinstance(value, (bytes, bytearray)):
                    row_dict[columns[i]] = str(value)
                else:
                    row_dict[columns[i]] = value
            data.append(row_dict)
        
        cursor.close()
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def get_table_structure(conn, table_name: str) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = %s 
            ORDER BY ordinal_position
        """, (table_name,))
        columns = [row[0] for row in cursor.fetchall()]
        cursor.close()
        return columns
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def sync_table_data(local_conn, server_conn, table_name: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
    print("-" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_data = get_table_data(local_conn, table_name)
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(local_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        
        if not local_data:
            print("  ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        server_columns = get_table_structure(server_conn, table_name)
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {server_columns}")
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        server_cursor = server_conn.cursor()
        server_cursor.execute(f"DELETE FROM {table_name}")
        print(f"  üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table_name}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        for row in local_data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            filtered_row = {k: v for k, v in row.items() if k in server_columns}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            columns = list(filtered_row.keys())
            values = list(filtered_row.values())
            placeholders = ', '.join(['%s'] * len(values))
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
            escaped_columns = [f'"{col}"' if col.lower() in ['user', 'group', 'order'] else col for col in columns]
            columns_str = ', '.join(escaped_columns)
            
            sql = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
            
            try:
                server_cursor.execute(sql, values)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {row.get('id', 'unknown')}: {e}")
                print(f"    SQL: {sql}")
                print(f"    Values: {values}")
                continue
        
        server_conn.commit()
        server_cursor.close()
        print(f"  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(local_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")

def sync_all_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –° –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î –ù–ê –°–ï–†–í–ï–†–ù–£–Æ")
    print("=" * 80)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    print("\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    local_conn = get_connection(LOCAL_DB_CONFIG)
    server_conn = get_connection(SERVER_DB_CONFIG)
    
    if not local_conn or not server_conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ)
    tables_to_sync = [
        'activity',
        'category', 
        'place',
        'profile',
        'tool',
        'vehicle'
    ]
    
    print(f"\nüìã –¢–∞–±–ª–∏—Ü –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {len(tables_to_sync)}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for table_name in tables_to_sync:
        sync_table_data(local_conn, server_conn, table_name)
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    local_conn.close()
    server_conn.close()
    
    print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    for table in tables_to_sync:
        print(f"  - {table}")

if __name__ == "__main__":
    sync_all_data()
