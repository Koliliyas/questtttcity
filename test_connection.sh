#!/bin/bash

# QuestCity - –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Backend ‚Üî Frontend
# –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

echo "üîç QuestCity Connection Test"
echo "============================"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[‚úÖ OK]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[‚ö†Ô∏è WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[‚ùå ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
echo "üîß Backend Check"
echo "---------------"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Backend
if pgrep -f "python.*main.py" > /dev/null; then
    log_success "Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
else
    log_warning "Backend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
if netstat -an | grep -q ":8000.*LISTEN"; then
    log_success "–ü–æ—Ä—Ç 8000 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è"
else
    log_error "–ü–æ—Ä—Ç 8000 –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞
if curl -s -f http://localhost:8000/api/v1/health >/dev/null 2>&1; then
    log_success "Backend API –æ—Ç–≤–µ—á–∞–µ—Ç (GET /api/v1/health)"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ health check
    health_response=$(curl -s http://localhost:8000/api/v1/health)
    echo "   Response: $health_response"
else
    log_error "Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ http://localhost:8000/api/v1/health"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
if curl -s -f http://localhost:8000/api/docs >/dev/null 2>&1; then
    log_success "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    log_warning "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "üì± Frontend Configuration Check"
echo "--------------------------------"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ -f "questcity-frontend/.env" ]; then
    log_success ".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    base_url=$(grep "^BASE_URL=" questcity-frontend/.env | cut -d'=' -f2)
    ws_url=$(grep "^WS_BASE_URL=" questcity-frontend/.env | cut -d'=' -f2)
    
    if [[ "$base_url" == *"localhost:8000"* ]]; then
        log_success "BASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ localhost: $base_url"
    else
        log_warning "BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ localhost: $base_url"
    fi
    
    if [[ "$ws_url" == *"localhost:8000"* ]]; then
        log_success "WS_BASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ localhost: $ws_url"
    else
        log_warning "WS_BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ localhost: $ws_url"
    fi
else
    log_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ questcity-frontend/"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ environment —Ñ–∞–π–ª–æ–≤
if [ -f "questcity-frontend/.env.development" ]; then
    log_success ".env.development —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    log_warning ".env.development —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "questcity-frontend/.env.production" ]; then
    log_success ".env.production —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    log_warning ".env.production —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ -f "questcity-frontend/pubspec.lock" ]; then
    log_success "Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (pubspec.lock)"
else
    log_warning "Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö API endpoints
echo "üîå API Endpoints Check"
echo "----------------------"

endpoints=(
    "GET /api/v1/health"
    "GET /api/docs"
    "GET /api/redoc"
)

for endpoint in "${endpoints[@]}"; do
    method=$(echo $endpoint | cut -d' ' -f1)
    path=$(echo $endpoint | cut -d' ' -f2)
    url="http://localhost:8000$path"
    
    if curl -s -f "$url" >/dev/null 2>&1; then
        log_success "$endpoint - –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "$endpoint - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
    fi
done

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
echo "üåê CORS Configuration Check"  
echo "---------------------------"

if [ -f "questcity-backend/main/.env" ]; then
    cors_origins=$(grep "APP_ALLOW_ORIGINS" questcity-backend/main/.env | cut -d'=' -f2)
    if [[ "$cors_origins" == *"*"* ]]; then
        log_success "CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (development)"
    else
        log_warning "CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: $cors_origins"
    fi
else
    log_error "Backend .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo "üìä Connection Summary"
echo "--------------------"

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
total_checks=0
passed_checks=0

# –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
if curl -s -f http://localhost:8000/api/v1/health >/dev/null 2>&1 && \
   [ -f "questcity-frontend/.env" ] && \
   grep -q "localhost:8000" questcity-frontend/.env; then
    echo -e "${GREEN}üéâ CONNECTION READY!${NC}"
    echo "   ‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   ‚úÖ Frontend –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ localhost"
    echo "   ‚úÖ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã"
    echo ""
    echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:"
    echo "   cd questcity-frontend && flutter run"
else
    echo -e "${RED}‚ùå CONNECTION ISSUES DETECTED${NC}"
    echo ""
    echo "üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: ./start_system.sh"
    echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo "   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç: ./test_connection.sh"
fi

echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_CONNECTION.md"
echo "üõ† –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫: ./start_system.sh" 