import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:los_angeles_quest/core/routes.dart';
import 'package:los_angeles_quest/core/fade_in_route.dart';
import 'package:los_angeles_quest/features/presentation/pages/admin/quest_create_screen/quest_create_screen.dart';
import 'package:los_angeles_quest/features/presentation/pages/admin/quest_edit_screen/quest_edit_screen.dart';
import 'package:los_angeles_quest/features/domain/usecases/quest/get_all_quests_admin.dart';
import 'package:los_angeles_quest/features/domain/usecases/quest/delete_quest.dart';
import 'package:los_angeles_quest/core/params/no_param.dart';

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
abstract class QuestsListScreenState extends Equatable {
  const QuestsListScreenState();

  @override
  List<Object?> get props => [];
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
class QuestsListScreenLoading extends QuestsListScreenState {
  const QuestsListScreenLoading();
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
class QuestsListScreenLoaded extends QuestsListScreenState {
  final List<Map<String, dynamic>> quests;

  const QuestsListScreenLoaded({required this.quests});

  @override
  List<Object?> get props => [quests];
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
class QuestsListScreenError extends QuestsListScreenState {
  final String message;

  const QuestsListScreenError({required this.message});

  @override
  List<Object?> get props => [message];
}

// Cubit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
class QuestsListScreenCubit extends Cubit<QuestsListScreenState> {
  final GetAllQuestsAdmin getQuestsUC; // Use case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤
  final DeleteQuest deleteQuestUC; // Use case –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞

  QuestsListScreenCubit({
    required this.getQuestsUC,
    required this.deleteQuestUC,
  }) : super(const QuestsListScreenLoading()) {
    searchController.addListener(_onSearchTextChanged);
  }

  final TextEditingController searchController = TextEditingController();

  void _onSearchTextChanged() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    print('üîç DEBUG: Search text changed: ${searchController.text}');
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
  Future<void> loadQuests() async {
    try {
      emit(const QuestsListScreenLoading());

      // –í—ã–∑—ã–≤–∞–µ–º use case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final result = await getQuestsUC(NoParams());

      result.fold(
        (failure) {
          print(
              'üîç DEBUG: QuestsListScreenCubit.loadQuests() - Failure: $failure');
          emit(QuestsListScreenError(message: failure.toString()));
        },
        (quests) {
          print(
              'üîç DEBUG: QuestsListScreenCubit.loadQuests() - Success: ${quests.length} quests');
          emit(QuestsListScreenLoaded(quests: quests));
        },
      );
    } catch (e) {
      print('üîç DEBUG: QuestsListScreenCubit.loadQuests() - Exception: $e');
      emit(QuestsListScreenError(message: e.toString()));
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
  Future<void> loadTestQuests() async {
    try {
      emit(const QuestsListScreenLoading());

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
      await Future.delayed(const Duration(seconds: 1));

      // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ UI
      final testQuests = [
        {
          'id': 1,
          'title': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç 1',
          'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞ 1',
          'category_id': 1,
          'difficulty': 'Easy',
          'duration': '1-2 hours',
          'cost': 100,
          'reward': 200,
        },
        {
          'id': 2,
          'title': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç 2',
          'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞ 2',
          'category_id': 2,
          'difficulty': 'Medium',
          'duration': '2-3 hours',
          'cost': 150,
          'reward': 300,
        },
      ];

      print(
          'üîç DEBUG: QuestsListScreenCubit.loadTestQuests() - Loading test data');
      emit(QuestsListScreenLoaded(quests: testQuests));
    } catch (e) {
      print('üîç DEBUG: QuestsListScreenCubit.loadTestQuests() - Exception: $e');
      emit(QuestsListScreenError(
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e'));
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  Future<void> deleteQuest(int questId) async {
    try {
      final result = await deleteQuestUC(DeleteQuestParams(questId: questId));
      result.fold(
        (failure) {
          emit(QuestsListScreenError(message: failure.toString()));
        },
        (_) {
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
          loadQuests();
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
          print('‚úÖ Quest $questId deleted successfully');
        },
      );
    } catch (e) {
      emit(QuestsListScreenError(message: 'Delete failed: $e'));
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–≤–µ—Å—Ç–∞
  void navigateToCreateQuest(BuildContext context) {
    Navigator.push(
      context,
      FadeInRoute(
        const QuestCreateScreen(),
        Routes.questCreateScreen,
      ),
    );
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–≤–µ—Å—Ç–∞
  void navigateToEditQuest(BuildContext context, int questId) {
    Navigator.push(
      context,
      FadeInRoute(
        QuestEditScreen(questId: questId),
        Routes.questEditScreen,
        arguments: {'questId': questId},
      ),
    );
  }

  // –£–±–∏—Ä–∞—é –º–µ—Ç–æ–¥ dispose, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Cubit
}
