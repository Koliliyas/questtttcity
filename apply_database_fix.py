#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""
import psycopg2
import os
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr'
}

def apply_database_fix():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**SERVER_DB_CONFIG)
        conn.autocommit = False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        print("üìñ –ß—Ç–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞...")
        script_path = 'fix_point_table.sql'
        
        if not os.path.exists(script_path):
            print(f"‚ùå –§–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        with open(script_path, 'r', encoding='utf-8') as file:
            sql_script = file.read()

        print("‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        print("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞...")
        print("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = sql_script.split(';')
        
        for i, command in enumerate(commands, 1):
            command = command.strip()
            if command and not command.startswith('--'):
                try:
                    print(f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {i}/{len(commands)}...")
                    cursor.execute(command)
                    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ {i}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏

        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        conn.commit()
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã point
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'point' AND table_schema = 'public'
            ORDER BY ordinal_position
        """)
        point_columns = cursor.fetchall()
        
        print(f"üìç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã point –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for col in point_columns:
            print(f"  - {col[0]}: {col[1]} (nullable: {col[2]})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã point_type
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'point_type'
            )
        """)
        point_type_exists = cursor.fetchone()[0]
        
        if point_type_exists:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ point_type —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ point_type
            cursor.execute("SELECT COUNT(*) FROM point_type")
            point_type_count = cursor.fetchone()[0]
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ point_type: {point_type_count}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ point_type –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        tables_to_check = ['point', 'category', 'vehicle', 'place', 'activity', 'tool', 'point_type', 'place_settings', 'quest']
        
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"  - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"  - {table}: –æ—à–∏–±–∫–∞ - {e}")

        cursor.close()
        conn.close()
        
        print("\n" + "=" * 80)
        print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False

def main():
    print("üß™ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 80)
    
    success = apply_database_fix()
    
    if success:
        print(f"\n{'='*80}")
        print("üéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API")
    else:
        print(f"\n{'='*80}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
