#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API
"""
import psycopg2
import requests
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'sslmode': 'disable'
}

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://questcity.ru/api/v1"

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 80)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**SERVER_DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        key_tables = ['user', 'profile', 'point', 'point_type', 'place_settings', 'quest', 'tool', 'category', 'vehicle', 'place', 'activity']
        
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table_name in key_tables:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = %s
                );
            """, (table_name,))
            
            exists = cursor.fetchone()[0]
            if exists:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"  ‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"  ‚ùå {table_name}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞:")
        cursor.execute("SELECT COUNT(*) FROM \"user\" WHERE email = 'admin@questcity.com'")
        admin_count = cursor.fetchone()[0]
        print(f"  üìä –ê–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ: {admin_count}")

        if admin_count > 0:
            cursor.execute("SELECT id, username, email, is_active FROM \"user\" WHERE email = 'admin@questcity.com'")
            admin_data = cursor.fetchone()
            print(f"  üìÑ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞: {admin_data}")

        cursor.close()
        conn.close()
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API")
    print("=" * 80)

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    print("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        print(f"  üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            print("  ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"  ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.text}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    # –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
    print("\nüìã –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞")
    login_data = {
        "login": "admin@questcity.com",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", data=login_data, timeout=10)
        print(f"  üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            access_token = result.get('accessToken')
            if access_token:
                print("  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("  ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

def main():
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = check_database_status()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_ok = check_api_status()
    
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print(f"  üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –û–ö' if db_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"  üåê API: {'‚úÖ –û–ö' if api_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if db_ok and api_ok:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    
    print("\n" + "=" * 80)
    print("‚úÖ –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
