#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ id –≤ —Ç–∞–±–ª–∏—Ü–µ review_response —Å INTEGER –Ω–∞ UUID
"""
import psycopg2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'sslmode': 'disable'
}

def fix_review_response_id():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ id –≤ —Ç–∞–±–ª–∏—Ü–µ review_response"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ê ID –í –¢–ê–ë–õ–ò–¶–ï REVIEW_RESPONSE")
    print("=" * 80)
    
    try:
        conn = psycopg2.connect(**SERVER_DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
        
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã review_response...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø id
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'review_response' AND column_name = 'id'
        """)
        column_info = cursor.fetchone()
        
        if column_info and column_info[1] == 'integer':
            print(f"  üìã –¢–µ–∫—É—â–∏–π —Ç–∏–ø id: {column_info[1]}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'review_response'
                ORDER BY ordinal_position
            """)
            columns = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å UUID id
            create_columns = []
            for col in columns:
                if col[0] == 'id':
                    create_columns.append('id UUID PRIMARY KEY DEFAULT gen_random_uuid()')
                else:
                    nullable = "NOT NULL" if col[2] == "NO" else ""
                    default = f"DEFAULT {col[3]}" if col[3] else ""
                    create_columns.append(f"{col[0]} {col[1]} {nullable} {default}".strip())
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DROP TABLE review_response")
            cursor.execute(f"CREATE TABLE review_response ({', '.join(create_columns)})")
            
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ review_response –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ review_response —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø id")
        
        cursor.close()
        conn.close()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    fix_review_response_id()
