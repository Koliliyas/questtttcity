#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö QuestCity
"""
import psycopg2
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr'
}

def check_duplicates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ QuestCity")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ category
        print("\nüè∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ category:")
        cursor.execute("""
            SELECT id, name, COUNT(*) as count
            FROM category 
            GROUP BY id, name 
            HAVING COUNT(*) > 1
            ORDER BY id
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(duplicates)}")
            for dup in duplicates:
                print(f"  - ID: {dup[0]}, Name: {dup[1]}, Count: {dup[2]}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ vehicle
        print("\nüöó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ vehicle:")
        cursor.execute("""
            SELECT id, name, COUNT(*) as count
            FROM vehicle 
            GROUP BY id, name 
            HAVING COUNT(*) > 1
            ORDER BY id
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(duplicates)}")
            for dup in duplicates:
                print(f"  - ID: {dup[0]}, Name: {dup[1]}, Count: {dup[2]}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ place
        print("\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ place:")
        cursor.execute("""
            SELECT id, name, COUNT(*) as count
            FROM place 
            GROUP BY id, name 
            HAVING COUNT(*) > 1
            ORDER BY id
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(duplicates)}")
            for dup in duplicates:
                print(f"  - ID: {dup[0]}, Name: {dup[1]}, Count: {dup[2]}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ activity
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ activity:")
        cursor.execute("""
            SELECT id, name, COUNT(*) as count
            FROM activity 
            GROUP BY id, name 
            HAVING COUNT(*) > 1
            ORDER BY id
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(duplicates)}")
            for dup in duplicates:
                print(f"  - ID: {dup[0]}, Name: {dup[1]}, Count: {dup[2]}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ tool
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ tool:")
        cursor.execute("""
            SELECT id, name, COUNT(*) as count
            FROM tool 
            GROUP BY id, name 
            HAVING COUNT(*) > 1
            ORDER BY id
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(duplicates)}")
            for dup in duplicates:
                print(f"  - ID: {dup[0]}, Name: {dup[1]}, Count: {dup[2]}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        print("\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
        tables = ['category', 'vehicle', 'place', 'activity', 'tool']
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  - {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        cursor.close()
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    success = check_duplicates()
    
    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")

if __name__ == "__main__":
    main()

