import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_and_create_activity():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å activity...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–ê–ö–£–Æ –ñ–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ FastAPI
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost/questcity',
            echo=True
        )
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ activity
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ activity...")
            result = await session.execute(text("SELECT * FROM activity"))
            all_rows = result.fetchall()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_rows)}")
            print(f"    –í—Å–µ –∑–∞–ø–∏—Å–∏: {all_rows}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —Å ID = 1
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å ID = 1...")
            result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
            row = result.fetchone()
            print(f"    –ó–∞–ø–∏—Å—å —Å ID = 1: {row}")
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
            if row is None:
                print("  ‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID = 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                result = await session.execute(text("""
                    SELECT column_name, data_type, is_nullable 
                    FROM information_schema.columns 
                    WHERE table_name = 'activity' 
                    ORDER BY ordinal_position
                """))
                columns = result.fetchall()
                print(f"    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {columns}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å activity
                try:
                    await session.execute(text("""
                        INSERT INTO activity (id, name) 
                        VALUES (1, 'activity')
                    """))
                    await session.commit()
                    print("  ‚úÖ –ó–∞–ø–∏—Å—å activity —Å ID = 1 —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å
                    result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
                    new_row = result.fetchone()
                    print(f"    –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {new_row}")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
                    await session.rollback()
            else:
                print("  ‚úÖ –ó–∞–ø–∏—Å—å —Å ID = 1 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
            result = await session.execute(text("SELECT * FROM activity"))
            all_rows = result.fetchall()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_rows)}")
            print(f"    –í—Å–µ –∑–∞–ø–∏—Å–∏: {all_rows}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å activity...")
    await check_and_create_activity()

if __name__ == "__main__":
    asyncio.run(main())
















