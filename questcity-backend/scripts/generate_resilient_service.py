#!/usr/bin/env python3
"""
ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä resilient —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è QuestCity Backend

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏:
- Retry –º–µ—Ö–∞–Ω–∏–∑–º
- Circuit Breaker  
- Health Check
- Graceful Degradation
- Exception classes
- Logging

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_resilient_service.py --name PaymentService --type repository
    python scripts/generate_resilient_service.py --name NotificationAPI --type api
"""

import argparse
import os
from pathlib import Path
from typing import Optional
import textwrap


def to_snake_case(name: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CamelCase –≤ snake_case"""
    import re
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def to_upper_snake_case(name: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ UPPER_SNAKE_CASE –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
    return to_snake_case(name).upper()


class ResilientServiceGenerator:
    def __init__(self, name: str, service_type: str, base_path: Path):
        self.name = name
        self.service_type = service_type
        self.base_path = base_path
        self.snake_name = to_snake_case(name)
        self.upper_snake_name = to_upper_snake_case(name)
        
    def generate_repository(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Repository —Å resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        return textwrap.dedent(f'''
        """
        {self.name} Repository —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: scripts/generate_resilient_service.py
        """
        
        import logging
        from typing import Dict, Any, Optional
        from core.resilience.retry import retry_with_backoff, RetryConfig
        from core.resilience.circuit_breaker import circuit_breaker, CircuitBreakerConfig
        from core.resilience.health_check import get_health_checker
        
        logger = logging.getLogger(__name__)
        
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry –¥–ª—è {self.name}
        {self.upper_snake_name}_RETRY_CONFIG = RetryConfig(
            max_attempts=3,
            base_delay=1.0,
            max_delay=60.0,
            backoff_factor=2.0,
            jitter=True,
            retryable_exceptions=(ConnectionError, TimeoutError, Exception)
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Circuit Breaker –¥–ª—è {self.name}
        {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG = CircuitBreakerConfig(
            failure_threshold=5,
            timeout_duration=60.0,
            success_threshold=3
        )
        
        
        class {self.name}UnavailableError(Exception):
            """{self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
            pass
        
        
        class {self.name}Repository:
            """
            Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å {self.name}
            
            –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ resilience –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
            - Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
            - Circuit Breaker –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤
            - Health Check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            - Graceful Degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            """
            
            def __init__(self, client: Any):  # –ó–∞–º–µ–Ω–∏—Ç–µ Any –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
                self._client = client
                logger.info(f"{self.name}Repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            @retry_with_backoff({self.upper_snake_name}_RETRY_CONFIG)
            @circuit_breaker("{self.snake_name}", {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG)
            async def create(self, data: Dict[str, Any]) -> Dict[str, Any]:
                """
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ {self.name}
                
                Args:
                    data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                    
                Returns:
                    –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
                    
                Raises:
                    {self.name}UnavailableError: –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                """
                health_checker = get_health_checker()
                if not health_checker.is_service_available("{self.snake_name}"):
                    logger.warning(f"{self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ health check")
                    raise {self.name}UnavailableError(f"{self.name} is currently unavailable")
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ {self.name}: {{data}}")
                result = await self._client.create(data)
                logger.info(f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ {self.name}: {{result}}")
                return result
            
            @retry_with_backoff({self.upper_snake_name}_RETRY_CONFIG)
            @circuit_breaker("{self.snake_name}", {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG)
            async def get(self, id: str) -> Optional[Dict[str, Any]]:
                """
                –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ {self.name}
                
                Args:
                    id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
                    
                Returns:
                    –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ None
                    
                Raises:
                    {self.name}UnavailableError: –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                """
                health_checker = get_health_checker()
                if not health_checker.is_service_available("{self.snake_name}"):
                    logger.warning(f"{self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ health check")
                    raise {self.name}UnavailableError(f"{self.name} is currently unavailable")
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ {self.name}: {{id}}")
                result = await self._client.get(id)
                logger.info(f"–ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ {self.name}: {{result}}")
                return result
            
            async def create_with_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
                """
                –°–æ–∑–¥–∞—Ç—å —Å fallback –ª–æ–≥–∏–∫–æ–π
                
                Args:
                    data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                    
                Returns:
                    –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                """
                try:
                    return await self.create(data)
                except {self.name}UnavailableError:
                    logger.warning(f"{self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                    return self._get_create_fallback(data)
            
            async def get_with_fallback(self, id: str) -> Optional[Dict[str, Any]]:
                """
                –ü–æ–ª—É—á–∏—Ç—å —Å fallback –ª–æ–≥–∏–∫–æ–π
                
                Args:
                    id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
                    
                Returns:
                    –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏, cached —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None
                """
                try:
                    return await self.get(id)
                except {self.name}UnavailableError:
                    logger.warning(f"{self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                    return self._get_cached_result(id)
            
            def _get_create_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
                """Fallback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å fallback –ª–æ–≥–∏–∫—É
                return {{"id": "fallback", "status": "pending", "data": data}}
            
            def _get_cached_result(self, id: str) -> Optional[Dict[str, Any]]:
                """–ü–æ–ª—É—á–∏—Ç—å cached —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                return None
        
        
        # Health Check —Ñ—É–Ω–∫—Ü–∏—è
        async def check_{self.snake_name}_health() -> bool:
            """
            Health check –¥–ª—è {self.name}
            
            Returns:
                True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
            """
            try:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
                # –ù–∞–ø—Ä–∏–º–µ—Ä: response = await client.ping()
                # return response.status == 200
                logger.info(f"Health check –¥–ª—è {self.name}: –û–ö")
                return True
            except Exception as e:
                logger.error(f"Health check –¥–ª—è {self.name} failed: {{e}}")
                return False
        
        
        def register_{self.snake_name}_health_check():
            """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç health check –≤ —Å–∏—Å—Ç–µ–º–µ"""
            health_checker = get_health_checker()
            health_checker.register_check("{self.snake_name}", check_{self.snake_name}_health)
            logger.info(f"Health check –¥–ª—è {self.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        ''').strip()
    
    def generate_api_client(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç API Client —Å resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        return textwrap.dedent(f'''
        """
        {self.name} API Client —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: scripts/generate_resilient_service.py
        """
        
        import logging
        from typing import Dict, Any, Optional
        import httpx
        from core.resilience.retry import retry_with_backoff
        from core.resilience.circuit_breaker import circuit_breaker
        from core.resilience.health_check import get_health_checker
        from core.resilience.retry import HTTP_RETRY_CONFIG
        from core.resilience.circuit_breaker import CircuitBreakerConfig
        
        logger = logging.getLogger(__name__)
        
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Circuit Breaker –¥–ª—è {self.name} API
        {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG = CircuitBreakerConfig(
            failure_threshold=3,
            timeout_duration=30.0,
            success_threshold=2
        )
        
        
        class {self.name}APIError(Exception):
            """{self.name} API –æ—à–∏–±–∫–∞"""
            pass
        
        
        class {self.name}UnavailableError(Exception):
            """{self.name} API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"""
            pass
        
        
        class {self.name}Client:
            """
            HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è {self.name} API
            
            –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ resilience –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
            - Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            - Circuit Breaker –¥–ª—è API endpoints
            - Health Check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API
            - Timeout –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            - Graceful Degradation –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            """
            
            def __init__(self, base_url: str, api_key: Optional[str] = None, timeout: int = 30):
                self.base_url = base_url.rstrip('/')
                self.api_key = api_key
                self.timeout = timeout
                self._headers = {{"Content-Type": "application/json"}}
                if api_key:
                    self._headers["Authorization"] = f"Bearer {{api_key}}"
                logger.info(f"{self.name}Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {{base_url}}")
            
            @retry_with_backoff(HTTP_RETRY_CONFIG)
            @circuit_breaker("{self.snake_name}_api", {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG)
            async def get(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
                """
                GET –∑–∞–ø—Ä–æ—Å –∫ {self.name} API
                
                Args:
                    endpoint: API endpoint
                    params: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    
                Returns:
                    –û—Ç–≤–µ—Ç API
                    
                Raises:
                    {self.name}UnavailableError: –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    {self.name}APIError: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
                """
                health_checker = get_health_checker()
                if not health_checker.is_service_available("{self.snake_name}_api"):
                    logger.warning(f"{self.name} API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ health check")
                    raise {self.name}UnavailableError(f"{self.name} API is currently unavailable")
                
                url = f"{{self.base_url}}/{{endpoint.lstrip('/')}}"
                logger.info(f"GET –∑–∞–ø—Ä–æ—Å –∫ {self.name} API: {{url}}")
                
                try:
                    async with httpx.AsyncClient(timeout=self.timeout) as client:
                        response = await client.get(url, headers=self._headers, params=params)
                        response.raise_for_status()
                        result = response.json()
                        logger.info(f"GET –∑–∞–ø—Ä–æ—Å –∫ {self.name} API —É—Å–ø–µ—à–µ–Ω: {{len(str(result))}} —Å–∏–º–≤–æ–ª–æ–≤")
                        return result
                except httpx.HTTPStatusError as e:
                    logger.error(f"HTTP –æ—à–∏–±–∫–∞ {self.name} API: {{e.response.status_code}} - {{e.response.text}}")
                    raise {self.name}APIError(f"API error: {{e.response.status_code}}")
                except httpx.RequestError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.name} API: {{e}}")
                    raise {self.name}UnavailableError(f"Connection error: {{e}}")
            
            @retry_with_backoff(HTTP_RETRY_CONFIG)
            @circuit_breaker("{self.snake_name}_api", {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG)
            async def post(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:
                """
                POST –∑–∞–ø—Ä–æ—Å –∫ {self.name} API
                
                Args:
                    endpoint: API endpoint
                    data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    
                Returns:
                    –û—Ç–≤–µ—Ç API
                    
                Raises:
                    {self.name}UnavailableError: –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    {self.name}APIError: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
                """
                health_checker = get_health_checker()
                if not health_checker.is_service_available("{self.snake_name}_api"):
                    logger.warning(f"{self.name} API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ health check")
                    raise {self.name}UnavailableError(f"{self.name} API is currently unavailable")
                
                url = f"{{self.base_url}}/{{endpoint.lstrip('/')}}"
                logger.info(f"POST –∑–∞–ø—Ä–æ—Å –∫ {self.name} API: {{url}}")
                
                try:
                    async with httpx.AsyncClient(timeout=self.timeout) as client:
                        response = await client.post(url, headers=self._headers, json=data)
                        response.raise_for_status()
                        result = response.json()
                        logger.info(f"POST –∑–∞–ø—Ä–æ—Å –∫ {self.name} API —É—Å–ø–µ—à–µ–Ω: {{len(str(result))}} —Å–∏–º–≤–æ–ª–æ–≤")
                        return result
                except httpx.HTTPStatusError as e:
                    logger.error(f"HTTP –æ—à–∏–±–∫–∞ {self.name} API: {{e.response.status_code}} - {{e.response.text}}")
                    raise {self.name}APIError(f"API error: {{e.response.status_code}}")
                except httpx.RequestError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.name} API: {{e}}")
                    raise {self.name}UnavailableError(f"Connection error: {{e}}")
            
            async def get_with_fallback(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
                """
                GET –∑–∞–ø—Ä–æ—Å —Å fallback –ª–æ–≥–∏–∫–æ–π
                
                Args:
                    endpoint: API endpoint
                    params: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    
                Returns:
                    –û—Ç–≤–µ—Ç API –∏–ª–∏ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                """
                try:
                    return await self.get(endpoint, params)
                except ({self.name}UnavailableError, {self.name}APIError):
                    logger.warning(f"{self.name} API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                    return self._get_fallback_result(endpoint, params)
            
            def _get_fallback_result(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
                """Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å fallback –ª–æ–≥–∏–∫—É (–∫–µ—à, –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç.–¥.)
                return {{
                    "status": "fallback",
                    "message": f"{self.name} API unavailable",
                    "endpoint": endpoint,
                    "timestamp": "{{}}".format(__import__('datetime').datetime.now().isoformat())
                }}
        
        
        # Health Check —Ñ—É–Ω–∫—Ü–∏—è
        async def check_{self.snake_name}_api_health() -> bool:
            """
            Health check –¥–ª—è {self.name} API
            
            Returns:
                True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–Ω–æ, False –∏–Ω–∞—á–µ
            """
            try:
                # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
                # client = {self.name}Client(base_url="https://api.example.com", timeout=5)
                # response = await client.get("/health")
                # return "status" in response and response["status"] == "ok"
                logger.info(f"Health check –¥–ª—è {self.name} API: –û–ö")
                return True
            except Exception as e:
                logger.error(f"Health check –¥–ª—è {self.name} API failed: {{e}}")
                return False
        
        
        def register_{self.snake_name}_api_health_check():
            """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç health check –≤ —Å–∏—Å—Ç–µ–º–µ"""
            health_checker = get_health_checker()
            health_checker.register_check("{self.snake_name}_api", check_{self.snake_name}_api_health)
            logger.info(f"Health check –¥–ª—è {self.name} API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        ''').strip()
    
    def generate_init_instructions(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        service_name_lower = self.snake_name
        service_name = self.name
        
        return textwrap.dedent(f'''
        # üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ {service_name}
        
        ## 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        
        –î–æ–±–∞–≤—å—Ç–µ –≤ `src/core/di/modules/default.py`:
        
        ```python
        from core.{service_name_lower} import {service_name}Repository, register_{service_name_lower}_health_check
        # –∏–ª–∏ –¥–ª—è API:
        # from core.{service_name_lower} import {service_name}Client, register_{service_name_lower}_api_health_check
        
        PROVIDERS: Providers = [
            # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            aioinject.Scoped({service_name}Repository),
            # –∏–ª–∏ –¥–ª—è API:
            # aioinject.Scoped({service_name}Client),
        ]
        ```
        
        ## 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Health Check
        
        –î–æ–±–∞–≤—å—Ç–µ –≤ `src/app.py` –≤ —Ñ—É–Ω–∫—Ü–∏—é `register_default_health_checks()`:
        
        ```python
        from core.{service_name_lower} import register_{service_name_lower}_health_check
        # –∏–ª–∏ –¥–ª—è API:
        # from core.{service_name_lower} import register_{service_name_lower}_api_health_check
        
        def register_default_health_checks():
            # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ health checks
            register_{service_name_lower}_health_check()
            # –∏–ª–∏ –¥–ª—è API:
            # register_{service_name_lower}_api_health_check()
        ```
        
        ## 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        –î–æ–±–∞–≤—å—Ç–µ –≤ `src/settings.py` –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
        
        ```python
        class {service_name}Settings(BaseSettings):
            api_url: str = "https://api.example.com"
            api_key: Optional[str] = None
            timeout: int = 30
            
            class Config:
                env_prefix = "{service_name.upper()}_"
        ```
        
        ## 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ
        
        ```python
        from core.{service_name_lower} import {service_name}Repository, {service_name}UnavailableError
        
        async def my_handler({service_name_lower}_repo: {service_name}Repository = Provide[{service_name}Repository]):
            try:
                # –û—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                result = await {service_name_lower}_repo.create({{"data": "example"}})
                return result
            except {service_name}UnavailableError:
                # Fallback –æ–ø–µ—Ä–∞—Ü–∏—è
                return await {service_name_lower}_repo.create_with_fallback({{"data": "example"}})
        ```
        
        ## 5. TODO: –î–æ—Ä–∞–±–æ—Ç–∫–∏
        
        - [ ] –ó–∞–º–µ–Ω–∏—Ç–µ `Any` —Ç–∏–ø—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
        - [ ] –†–µ–∞–ª–∏–∑—É–π—Ç–µ fallback –ª–æ–≥–∏–∫—É
        - [ ] –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ health check URL
        - [ ] –î–æ–±–∞–≤—å—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        - [ ] –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        - [ ] –î–æ–±–∞–≤—å—Ç–µ —é–Ω–∏—Ç —Ç–µ—Å—Ç—ã
        
        ## 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Health check –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:
        - `/health/services/{service_name_lower}` - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        - `/health/detailed` - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ''').strip()
    
    def generate(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        service_dir = self.base_path / "src" / "core" / self.snake_name
        service_dir.mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        if self.service_type == "repository":
            code = self.generate_repository()
            filename = "repository.py"
        elif self.service_type == "api":
            code = self.generate_api_client()
            filename = "client.py"
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {self.service_type}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        main_file = service_dir / filename
        main_file.write_text(code, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {main_file}")
        
        # –°–æ–∑–¥–∞–µ–º __init__.py
        init_file = service_dir / "__init__.py"
        if self.service_type == "repository":
            init_content = f'''"""
{self.name} –º–æ–¥—É–ª—å —Å resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
"""

from .repository import (
    {self.name}Repository,
    {self.name}UnavailableError,
    check_{self.snake_name}_health,
    register_{self.snake_name}_health_check,
    {self.upper_snake_name}_RETRY_CONFIG,
    {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG,
)

__all__ = [
    "{self.name}Repository",
    "{self.name}UnavailableError", 
    "check_{self.snake_name}_health",
    "register_{self.snake_name}_health_check",
    "{self.upper_snake_name}_RETRY_CONFIG",
    "{self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG",
]
'''
        else:
            init_content = f'''"""
{self.name} API –º–æ–¥—É–ª—å —Å resilience –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
"""

from .client import (
    {self.name}Client,
    {self.name}APIError,
    {self.name}UnavailableError,
    check_{self.snake_name}_api_health,
    register_{self.snake_name}_api_health_check,
    {self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG,
)

__all__ = [
    "{self.name}Client",
    "{self.name}APIError",
    "{self.name}UnavailableError",
    "check_{self.snake_name}_api_health", 
    "register_{self.snake_name}_api_health_check",
    "{self.upper_snake_name}_CIRCUIT_BREAKER_CONFIG",
]
'''
        
        init_file.write_text(init_content, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {init_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        instructions = self.generate_init_instructions()
        instructions_file = service_dir / "INTEGRATION.md"
        instructions_file.write_text(instructions, encoding='utf-8')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {instructions_file}")
        
        print(f"\nüéâ {self.name} {self.service_type} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {service_dir}")
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {instructions_file}")


def main():
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä resilient —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è QuestCity Backend"
    )
    parser.add_argument(
        "--name", 
        required=True,
        help="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: PaymentService, NotificationAPI)"
    )
    parser.add_argument(
        "--type",
        choices=["repository", "api"],
        required=True,
        help="–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞: repository –∏–ª–∏ api"
    )
    parser.add_argument(
        "--base-path",
        type=Path,
        default=Path.cwd(),
        help="–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    src_path = args.base_path / "src"
    if not src_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {src_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è backend –ø—Ä–æ–µ–∫—Ç–∞")
        return 1
    
    try:
        generator = ResilientServiceGenerator(args.name, args.type, args.base_path)
        generator.generate()
        
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ò–∑—É—á–∏—Ç–µ —Ñ–∞–π–ª INTEGRATION.md –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print(f"2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–µ—Ä–≤–∏—Å –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        print(f"3. –î–æ–±–∞–≤—å—Ç–µ health check –≤ app.py")
        print(f"4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ settings.py")
        print(f"5. –†–µ–∞–ª–∏–∑—É–π—Ç–µ TODO —á–∞—Å—Ç–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return 1


if __name__ == "__main__":
    exit(main()) 