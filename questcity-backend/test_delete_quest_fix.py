#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.core.quest.services import QuestService
from src.db.repositories import QuestRepository, PointRepository
from src.db.dependencies import create_session
from src.db.models.quest.quest import Quest
from src.db.models.quest.point import Point
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

async def test_delete_quest_with_points():
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    async with create_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            quest_repo = QuestRepository(session, Quest)
            point_repo = PointRepository(session, Point)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
            test_quest = Quest(
                name="Test Quest for Delete",
                description="Test quest description",
                image="test.jpg",
                mentor_preference="test.xlsx",
                auto_accrual=True,
                cost=100,
                reward=200,
                category_id=1,
                group="TWO",
                vehicle_id=1,
                is_subscription=False,
                pay_extra=0,
                level="EASY",
                milage="UP_TO_TEN",
                place_id=1
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–µ—Å—Ç
            session.add(test_quest)
            await session.flush()
            quest_id = test_quest.id
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å ID: {quest_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è –∫–≤–µ—Å—Ç–∞
            test_point = Point(
                name_of_location="Test Point",
                order=1,
                description="Test point description",
                type_id=1,
                quest_id=quest_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É
            session.add(test_point)
            await session.flush()
            point_id = test_point.id
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å ID: {point_id} –¥–ª—è –∫–≤–µ—Å—Ç–∞ {quest_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
            point_check = await session.execute(
                select(Point).where(Point.id == point_id)
            )
            point_check = point_check.scalar_one_or_none()
            
            if point_check:
                print(f"‚úÖ –¢–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {point_check.name_of_location}")
            else:
                print("‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            quest_service = QuestService(
                merch_service=None,  # –ú–æ–∫
                point_repository=point_repo,
                place_preference_repository=None,  # –ú–æ–∫
                quest_repository=quest_repo,
                items_service=None,  # –ú–æ–∫
                s3=None  # –ú–æ–∫
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç
            print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç {quest_id}...")
            result = await quest_service.delete_quest(quest_id)
            
            if hasattr(result, 'is_ok') and result.is_ok():
                print(f"‚úÖ –ö–≤–µ—Å—Ç {quest_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ —Ç–æ–∂–µ —É–¥–∞–ª–µ–Ω–∞
                point_check_after = await session.execute(
                    select(Point).where(Point.id == point_id)
                )
                point_check_after = point_check_after.scalar_one_or_none()
                
                if point_check_after is None:
                    print(f"‚úÖ –¢–æ—á–∫–∞ {point_id} —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
                else:
                    print(f"‚ùå –¢–æ—á–∫–∞ {point_id} –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞: {result}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.rollback()
            print("üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏...")
    asyncio.run(test_delete_quest_with_points())
    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")








