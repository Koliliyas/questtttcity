#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def check_quests_in_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–≤–µ—Å—Ç—ã
        quests_query = """
        SELECT id, name, description, category_id, level, timeframe, "group", 
               cost, reward, pay_extra, is_subscription, vehicle_id,
               mentor_preference, auto_accrual, milage, place_id
        FROM quest
        ORDER BY id
        """
        
        quests = await conn.fetch(quests_query)
        
        print(f"üìä –í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(quests)}")
        print()
        
        if len(quests) == 0:
            print("‚ùå –ö–≤–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!")
            print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  1. –ö–≤–µ—Å—Ç—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            print("  2. –ö–≤–µ—Å—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
            print("  3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        for quest in quests:
            print(f"üéØ –ö–≤–µ—Å—Ç ID {quest['id']}:")
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {quest['name']}")
            print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {quest['description'][:50]}...")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {quest['category_id']}")
            print(f"   - –£—Ä–æ–≤–µ–Ω—å: {quest['level']}")
            print(f"   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: {quest['timeframe']}")
            print(f"   - –ì—Ä—É–ø–ø–∞: {quest['group']}")
            print(f"   - –°—Ç–æ–∏–º–æ—Å—Ç—å: {quest['cost']}")
            print(f"   - –ù–∞–≥—Ä–∞–¥–∞: {quest['reward']}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        
        # –¢–æ—á–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
        points_query = "SELECT COUNT(*) FROM point"
        points_count = await conn.fetchval(points_query)
        print(f"   - –¢–æ—á–∫–∏ –∫–≤–µ—Å—Ç–æ–≤: {points_count}")
        
        # –ú–µ—Å—Ç–∞
        places_query = "SELECT COUNT(*) FROM place"
        places_count = await conn.fetchval(places_query)
        print(f"   - –ú–µ—Å—Ç–∞: {places_count}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç
        place_settings_query = "SELECT COUNT(*) FROM place_settings"
        place_settings_count = await conn.fetchval(place_settings_query)
        print(f"   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç: {place_settings_count}")
        
        # –ú–µ—Ä—á
        merch_query = "SELECT COUNT(*) FROM merch"
        merch_count = await conn.fetchval(merch_query)
        print(f"   - –ú–µ—Ä—á: {merch_count}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_query = "SELECT COUNT(*) FROM category"
        categories_count = await conn.fetchval(categories_query)
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}")
        
        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        vehicles_query = "SELECT COUNT(*) FROM vehicle"
        vehicles_count = await conn.fetchval(vehicles_query)
        print(f"   - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicles_count}")
        
        # –ú–µ—Å—Ç–∞ (place)
        place_table_query = "SELECT COUNT(*) FROM place"
        place_table_count = await conn.fetchval(place_table_query)
        print(f"   - –¢–∞–±–ª–∏—Ü–∞ place: {place_table_count}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–≤–µ—Å—Ç–æ–≤: {e}")

if __name__ == "__main__":
    asyncio.run(check_quests_in_db())
