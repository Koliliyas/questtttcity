import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text, inspect

async def check_activity_table():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity –Ω–∞–ø—Ä—è–º—É—é...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–ê–ö–£–Æ –ñ–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ FastAPI
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost/questcity',
            echo=True
        )
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
            result = await session.execute(text("""
                SELECT table_name, table_schema 
                FROM information_schema.tables 
                WHERE table_name = 'activity'
            """))
            table_info = result.fetchone()
            print(f"    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ: {table_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ activity...")
            result = await session.execute(text("SELECT * FROM activity"))
            all_rows = result.fetchall()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_rows)}")
            print(f"    –í—Å–µ –∑–∞–ø–∏—Å–∏: {all_rows}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —Å ID = 1
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å ID = 1...")
            result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
            row = result.fetchone()
            print(f"    –ó–∞–ø–∏—Å—å —Å ID = 1: {row}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ID...")
            result = await session.execute(text("SELECT MIN(id), MAX(id) FROM activity"))
            min_max = result.fetchone()
            print(f"    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID: {min_max}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...")
            result = await session.execute(text("""
                SELECT grantee, privilege_type 
                FROM information_schema.role_table_grants 
                WHERE table_name = 'activity'
            """))
            grants = result.fetchall()
            print(f"    –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {grants}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity...")
    await check_activity_table()

if __name__ == "__main__":
    asyncio.run(main())
















