#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–æ —É—Å–ø–µ—Ö–∞
"""

import asyncio
import asyncpg
import os
import requests
import time
from dotenv import load_dotenv

load_dotenv()

def get_admin_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('.admin_token', 'r') as f:
            token = f.read().strip()
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:50]}...")
            return token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def create_test_quest():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
        quest_query = """
        INSERT INTO quest (name, description, image, category_id, level, timeframe, 
                          "group", cost, reward, pay_extra, is_subscription, vehicle_id,
                          mentor_preference, auto_accrual, milage, place_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
        RETURNING id
        """
        
        quest_result = await conn.fetchrow(quest_query, 
            f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {int(time.time())}",  # name
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞",     # description
            "test_image.jpg",               # image
            1,                              # category_id
            "EASY",                         # level (enum)
            "ONE_HOUR",                     # timeframe (enum)
            "ALONE",                        # group (enum)
            100,                            # cost
            200,                            # reward
            0,                              # pay_extra (integer)
            False,                          # is_subscription
            1,                              # vehicle_id
            "test_mentor",                  # mentor_preference
            True,                           # auto_accrual
            "UP_TO_TEN",                    # milage (enum)
            1                               # place_id
        )
        
        quest_id = quest_result['id']
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç —Å ID: {quest_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        activity_result = await conn.fetchrow("SELECT id FROM activity LIMIT 1")
        tool_result = await conn.fetchrow("SELECT id FROM tool LIMIT 1")
        
        if activity_result and tool_result:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É
            point_query = """
            INSERT INTO point (name_of_location, description, "order", type_id, tool_id, 
                              file, is_divide, quest_id)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            RETURNING id
            """
            
            point_result = await conn.fetchrow(point_query,
                "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞",               # name_of_location
                "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏",      # description
                1,                              # order
                activity_result['id'],          # type_id
                tool_result['id'],              # tool_id
                "test_file.txt",                # file
                False,                          # is_divide
                quest_id                        # quest_id
            )
            
            point_id = point_result['id']
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å ID: {point_id}")
            
            # –°–æ–∑–¥–∞–µ–º place_settings –¥–ª—è —Ç–æ—á–∫–∏
            place_settings_query = """
            INSERT INTO place_settings (longitude, latitude, detections_radius, height, 
                                       random_occurrence, interaction_inaccuracy, part, point_id)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            """
            
            await conn.execute(place_settings_query,
                55.7558,                        # longitude
                37.6176,                        # latitude
                100.0,                          # detections_radius
                10.0,                           # height
                0.5,                            # random_occurrence
                5.0,                            # interaction_inaccuracy
                1,                              # part
                point_id                        # point_id
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã place_settings –¥–ª—è —Ç–æ—á–∫–∏ {point_id}")
        else:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö activity –∏–ª–∏ tool, —Å–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç –±–µ–∑ —Ç–æ—á–µ–∫")
        
        await conn.close()
        return quest_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞: {e}")
        return None

def test_delete_api_with_auth(quest_id, token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    BASE_URL = "http://localhost:8000/api/v1"
    
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ {quest_id} —á–µ—Ä–µ–∑ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    print(f"üì° URL: {BASE_URL}/quests/admin/delete/{quest_id}")
    print("=" * 60)
    
    try:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        response = requests.delete(f"{BASE_URL}/quests/admin/delete/{quest_id}", headers=headers)
        
        print(f"Status: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ SUCCESS: –ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ API!")
            return True
        elif response.status_code == 401:
            print("‚ùå Got 401 (Unauthorized) - —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
            return False
        elif response.status_code == 404:
            print("‚ùå Got 404 (Not Found) - –∫–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        elif response.status_code == 500:
            print("‚ùå Got 500 (Internal Server Error) - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            print(f"   –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
        else:
            print(f"‚ö†Ô∏è  UNEXPECTED: Got {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: Cannot connect to server")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

async def check_quest_exists(quest_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–≤–µ—Å—Ç"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    try:
        conn = await asyncpg.connect(database_url)
        quest = await conn.fetchrow("SELECT id, name FROM quest WHERE id = $1", quest_id)
        await conn.close()
        
        if quest:
            print(f"‚úÖ –ö–≤–µ—Å—Ç {quest_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {quest['name']}")
            return True
        else:
            print(f"‚ùå –ö–≤–µ—Å—Ç {quest_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É–¥–∞–ª—è–µ–º –∫–≤–µ—Å—Ç –¥–æ —É—Å–ø–µ—Ö–∞"""
    
    print("üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –ö–í–ï–°–¢–ê –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô –î–û –£–°–ü–ï–•–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    token = get_admin_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç
    quest_id = await create_test_quest()
    if not quest_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω
    if not await check_quest_exists(quest_id):
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        return
    
    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç –¥–æ —É—Å–ø–µ—Ö–∞
    attempt = 1
    max_attempts = 5
    
    while attempt <= max_attempts:
        print(f"\nüéØ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –£–¥–∞–ª—è–µ–º –∫–≤–µ—Å—Ç {quest_id}...")
        
        success = test_delete_api_with_auth(quest_id, token)
        
        if success:
            print("üéâ –£–°–ü–ï–•! –ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ API!")
            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç...")
        if not await check_quest_exists(quest_id):
            print("üéâ –£–°–ü–ï–•! –ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ë–î)")
            break
        
        print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –∫–≤–µ—Å—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        attempt += 1
        
        if attempt <= max_attempts:
            print(f"‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(2)
    
    if attempt > max_attempts:
        print("üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∫–≤–µ—Å—Ç –Ω–µ —É–¥–∞–ª–µ–Ω")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    if not await check_quest_exists(quest_id):
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –£–°–ü–ï–•! –ö–≤–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå –ù–ï–£–î–ê–ß–ê: –ö–≤–µ—Å—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main())
