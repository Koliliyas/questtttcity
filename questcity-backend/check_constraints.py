#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.db.dependencies import create_session
from sqlalchemy import text

async def check_foreign_key_constraints():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å quest"""
    
    async with create_session() as session:
        try:
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            query = text("""
                SELECT 
                    tc.table_name, 
                    tc.constraint_name, 
                    tc.constraint_type,
                    kcu.column_name,
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name,
                    rc.delete_rule,
                    rc.update_rule
                FROM 
                    information_schema.table_constraints AS tc 
                    JOIN information_schema.key_column_usage AS kcu
                      ON tc.constraint_name = kcu.constraint_name
                      AND tc.table_schema = kcu.table_schema
                    JOIN information_schema.constraint_column_usage AS ccu
                      ON ccu.constraint_name = tc.constraint_name
                      AND ccu.table_schema = tc.table_schema
                    JOIN information_schema.referential_constraints AS rc
                      ON tc.constraint_name = rc.constraint_name
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                    AND tc.table_name IN ('merch', 'point', 'review')
                    AND ccu.table_name = 'quest'
                ORDER BY tc.table_name;
            """)
            
            result = await session.execute(query)
            rows = result.fetchall()
            
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å quest:")
            print("=" * 80)
            
            if not rows:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü merch, point, review")
                return False
            
            cascade_count = 0
            for row in rows:
                table_name = row[0]
                constraint_name = row[1]
                column_name = row[3]
                foreign_table = row[4]
                foreign_column = row[5]
                delete_rule = row[6]
                update_rule = row[7]
                
                status = "‚úÖ CASCADE" if delete_rule == "CASCADE" else "‚ùå NO ACTION"
                if delete_rule == "CASCADE":
                    cascade_count += 1
                
                print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                print(f"   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {constraint_name}")
                print(f"   –ö–æ–ª–æ–Ω–∫–∞: {column_name} -> {foreign_table}.{foreign_column}")
                print(f"   –£–¥–∞–ª–µ–Ω–∏–µ: {status} ({delete_rule})")
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_rule}")
                print("-" * 40)
            
            print(f"\nüìä –ò—Ç–æ–≥–æ: {cascade_count}/{len(rows)} —Ç–∞–±–ª–∏—Ü —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º")
            
            if cascade_count == len(rows):
                print("üéâ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –∏–º–µ—é—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç fix_cascade_delete.sql –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            return False

if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
    success = asyncio.run(check_foreign_key_constraints())
    
    if success:
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã!")
    
    print("üèÅ –ì–æ—Ç–æ–≤–æ.")








