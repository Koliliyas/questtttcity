import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, text

async def test_activity_async():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Activity —á–µ—Ä–µ–∑ asyncpg (–∫–∞–∫ –≤ FastAPI)...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–ê–ö–£–Æ –ñ–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ FastAPI
        engine = create_async_engine(
            'postgresql+asyncpg://postgres:postgres@localhost/questcity',
            echo=True  # –í–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        )
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("  ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
            print("  üîç –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å...")
            result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
            row = result.fetchone()
            print(f"    SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {row}")
            
            # –¢–µ—Å—Ç 2: SQLAlchemy select
            print("  üîç –¢–µ—Å—Ç 2: SQLAlchemy select...")
            from src.db.models.quest.point import Activity
            stmt = select(Activity).where(Activity.id == 1)
            result = await session.execute(stmt)
            activity = result.scalar_one_or_none()
            print(f"    Select —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity}")
            
            # –¢–µ—Å—Ç 3: session.get() (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
            print("  üîç –¢–µ—Å—Ç 3: session.get()...")
            try:
                activity_get = await session.get(Activity, 1)
                print(f"    Get —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {activity_get}")
            except Exception as e:
                print(f"    Get –æ—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            print("  üîç –¢–µ—Å—Ç 4: –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ activity...")
            result = await session.execute(text("SELECT * FROM activity"))
            all_rows = result.fetchall()
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_rows)}")
            print(f"    –ü–µ—Ä–≤—ã–µ 3: {all_rows[:3]}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_activity_model_async():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Activity –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...")
    try:
        from src.db.models.quest.point import Activity
        
        print(f"  –ú–æ–¥–µ–ª—å: {Activity}")
        print(f"  –¢–∞–±–ª–∏—Ü–∞: {Activity.__tablename__}")
        print(f"  –°—Ö–µ–º–∞: {Activity.__table__.schema}")
        print(f"  –ü–æ–ª–Ω–æ–µ –∏–º—è: {Activity.__table__.fullname}")
        print(f"  –ö–æ–ª–æ–Ω–∫–∏: {[c.name for c in Activity.__table__.columns]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º
        print(f"  –ú–æ–¥—É–ª—å: {Activity.__module__}")
        print(f"  –ö–ª–∞—Å—Å: {Activity.__class__}")
        
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {e}")

async def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Activity —á–µ—Ä–µ–∑ asyncpg...")
    await test_activity_model_async()
    await test_activity_async()

if __name__ == "__main__":
    asyncio.run(main())
















