#!/bin/bash

# QuestCity Backend - Authentication API Testing Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./test_auth_api.sh           - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
#   ./test_auth_api.sh --quick   - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
#   ./test_auth_api.sh --login   - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="http://localhost:8000/api/v1"
TEST_USER_EMAIL="testuser@questcity.com"
TEST_USER_USERNAME="testuser"
TEST_USER_PASSWORD="TestPass123!"
ACCESS_TOKEN=""
REFRESH_TOKEN=""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_test() {
    echo -e "${YELLOW}üß™ –¢–µ—Å—Ç: $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    local health_response=$(curl -s "$API_BASE/health/" 2>/dev/null || echo "error")
    
    if [[ "$health_response" == *"status"* ]]; then
        print_success "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $API_BASE"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: ./quick_start.sh --bg"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email
generate_test_email() {
    local timestamp=$(date +%s)
    local short_timestamp=${timestamp: -6}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
    echo "test${short_timestamp}@qc.com"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ username
generate_test_username() {
    local timestamp=$(date +%s)
    local short_timestamp=${timestamp: -6}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
    echo "test${short_timestamp}"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
test_user_registration() {
    print_test "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    local unique_email=$(generate_test_email)
    local unique_username=$(generate_test_username)
    
    local registration_data='{
        "username": "'$unique_username'",
        "email": "'$unique_email'",
        "password1": "'$TEST_USER_PASSWORD'",
        "password2": "'$TEST_USER_PASSWORD'",
        "first_name": "Test",
        "last_name": "User",
        "instagram_username": "test_insta"
    }'
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 204 (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    local http_status=$(curl -s -o /tmp/register_response.json -w "%{http_code}" -X POST "$API_BASE/auth/register" \
        -H "Content-Type: application/json" \
        -d "$registration_data" 2>/dev/null || echo "000")
    
    local response=$(cat /tmp/register_response.json 2>/dev/null || echo "")
    
    if [ "$http_status" = "204" ]; then
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        print_info "Email: $unique_email"
        print_info "Username: $unique_username"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        TEST_USER_EMAIL="$unique_email"
        TEST_USER_USERNAME="$unique_username"
        echo "$unique_email" > .test_user_email
        echo "$unique_username" > .test_user_username
        rm -f /tmp/register_response.json
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (HTTP: $http_status)"
        print_error "–û—Ç–≤–µ—Ç: $response"
        rm -f /tmp/register_response.json
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
test_user_login() {
    print_test "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞
    local login_email="admin@questcity.com"
    local login_password="admin123"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if [ -f ".test_user_email" ]; then
        login_email=$(cat .test_user_email)
        login_password="$TEST_USER_PASSWORD"
    fi
    
    local response=$(curl -s -X POST "$API_BASE/auth/login" \
        -d "login=$login_email" \
        -d "password=$login_password" 2>/dev/null || echo '{"error":"request_failed"}')
    
    ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken // empty' 2>/dev/null || echo "")
    REFRESH_TOKEN=$(echo "$response" | jq -r '.refreshToken // empty' 2>/dev/null || echo "")
    
    if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ] && [ "$ACCESS_TOKEN" != "" ]; then
        print_success "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $login_email"
        echo "$ACCESS_TOKEN" > .test_access_token
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
test_token_refresh() {
    print_test "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"
    
    if [ -z "$REFRESH_TOKEN" ]; then
        print_warning "–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        return 1
    fi
    
    local response=$(curl -s -X POST "$API_BASE/auth/refresh" \
        -H "Content-Type: application/json" \
        -d '{"refresh_token":"'$REFRESH_TOKEN'"}' 2>/dev/null || echo '{"error":"request_failed"}')
    
    local new_access_token=$(echo "$response" | jq -r '.accessToken // empty' 2>/dev/null || echo "")
    
    if [ -n "$new_access_token" ] && [ "$new_access_token" != "null" ] && [ "$new_access_token" != "" ]; then
        print_success "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
        ACCESS_TOKEN="$new_access_token"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
test_protected_access() {
    print_test "–î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    local admin_token=""
    if [ -f ".admin_token" ]; then
        admin_token=$(cat .admin_token)
    fi
    
    if [ -z "$admin_token" ]; then
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
        local admin_response=$(curl -s -X POST "$API_BASE/auth/login" \
            -d "login=admin@questcity.com" \
            -d "password=admin123" 2>/dev/null || echo '{"error":"request_failed"}')
        
        admin_token=$(echo "$admin_response" | jq -r '.accessToken // empty' 2>/dev/null || echo "")
    fi
    
    if [ -z "$admin_token" ]; then
        print_warning "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
        return 1
    fi
    
    local response=$(curl -s -X GET "$API_BASE/quests/" \
        -H "Authorization: Bearer $admin_token" 2>/dev/null || echo '{"error":"request_failed"}')
    
    if [[ "$response" == *"["* ]] || [[ "$response" == *"items"* ]]; then
        print_success "–î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç (–∞–¥–º–∏–Ω)"
        local count=$(echo "$response" | jq '. | length' 2>/dev/null || echo "unknown")
        print_info "–î–æ—Å—Ç—É–ø–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: $count"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
test_user_logout() {
    print_test "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    
    if [ -z "$ACCESS_TOKEN" ]; then
        print_warning "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞"
        return 1
    fi
    
    local response=$(curl -s -X POST "$API_BASE/auth/logout" \
        -H "Authorization: Bearer $ACCESS_TOKEN" 2>/dev/null || echo '{"error":"request_failed"}')
    
    # Logout –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if [[ "$response" != *"INTERNAL_SERVER_ERROR"* ]]; then
        print_success "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
test_invalid_credentials() {
    print_test "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    local response=$(curl -s -X POST "$API_BASE/auth/login" \
        -d "login=invalid@email.com" \
        -d "password=wrongpassword" 2>/dev/null || echo '{"error":"request_failed"}')
    
    if [[ "$response" == *"INVALID_USER_CREDENTIALS"* ]] || [[ "$response" == *"Invalid"* ]] || [[ "$response" == *"Unauthorized"* ]] || [[ "$response" == *"Incorrect"* ]]; then
        print_success "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"
        return 0
    else
        print_error "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã (–ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!)"
        print_error "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
cleanup_test_data() {
    print_status "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    rm -f .test_user_email .test_user_username .test_access_token
    print_info "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo -e "${CYAN}QuestCity Backend - Authentication API Testing Script${NC}"
    echo ""
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./test_auth_api.sh           - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    echo "  ./test_auth_api.sh --quick   - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    echo "  ./test_auth_api.sh --login   - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞"
    echo "  ./test_auth_api.sh --help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${NC}"
    echo "  - –ó–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä QuestCity Backend"
    echo "  - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë            üîê QuestCity Authentication API Testing           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq
    if ! command -v jq &> /dev/null; then
        print_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install jq"
        exit 1
    fi
    
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --login)
            check_server
            test_user_login
            test_protected_access
            cleanup_test_data
            exit 0
            ;;
        --quick)
            check_server
            test_user_login
            test_protected_access
            cleanup_test_data
            exit 0
            ;;
        *)
            # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            print_status "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
            
            check_server
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ==="
            test_user_registration
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ==="
            test_user_login
            test_protected_access
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ==="
            test_invalid_credentials
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ ==="
            test_token_refresh
            
            print_info "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ ==="
            test_user_logout
            
            cleanup_test_data
            
            print_success "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
trap cleanup_test_data EXIT

# –ó–∞–ø—É—Å–∫
main "$@" 