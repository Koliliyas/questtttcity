#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def list_all_users():
    """–í—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏"""
    
    database_user = os.getenv("DATABASE_USERNAME", "postgres")
    database_password = os.getenv("DATABASE_PASSWORD", "postgres")
    database_host = os.getenv("DATABASE_HOST", "localhost")
    database_port = os.getenv("DATABASE_PORT", "5432")
    database_name = os.getenv("DATABASE_NAME", "questcity_db")
    
    database_url = f"postgresql://{database_user}:{database_password}@{database_host}:{database_port}/{database_name}"
    
    print(f"üìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
    print("=" * 60)
    
    try:
        conn = await asyncpg.connect(database_url)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_query = """
        SELECT id, username, email, role, is_verified, is_active, can_edit_quests, can_lock_users
        FROM "user"
        ORDER BY username
        """
        
        users = await conn.fetch(users_query)
        
        role_names = {0: "USER", 1: "MODERATOR", 2: "ADMIN"}
        
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print()
        
        for user in users:
            role_name = role_names.get(user['role'], f"UNKNOWN({user['role']})")
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            verified = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if user['is_verified'] else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            
            print(f"üë§ {user['username']} ({user['email']})")
            print(f"   - ID: {user['id']}")
            print(f"   - –†–æ–ª—å: {role_name}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verified}")
            print(f"   - –ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç—ã: {'–î–∞' if user['can_edit_quests'] else '–ù–µ—Ç'}")
            print(f"   - –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'–î–∞' if user['can_lock_users'] else '–ù–µ—Ç'}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (role = 0)
        regular_users = [u for u in users if u['role'] == 0]
        if regular_users:
            print(f"üîê –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (role = 0):")
            for user in regular_users:
                print(f"   - {user['username']} ({user['email']})")
        else:
            print("‚ùå –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (role = 0) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

if __name__ == "__main__":
    asyncio.run(list_all_users())
