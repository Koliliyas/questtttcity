#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
from sqlalchemy import text
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "src"))
from db.dependencies import create_session

async def check_all_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ"""
    
    try:
        async with create_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(text("""
                SELECT 
                    u.id,
                    u.username, 
                    u.email, 
                    u.is_verified, 
                    u.is_active,
                    u.created_at
                FROM "user" u
                ORDER BY u.created_at DESC
                LIMIT 10
            """))
            
            users = result.fetchall()
            
            if users:
                print(f"üë• –ù–ê–ô–î–ï–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: {len(users)}")
                print("=" * 80)
                
                for i, user in enumerate(users, 1):
                    print(f"{i}. {user.username} ({user.email})")
                    print(f"   ID: {user.id}")
                    print(f"   Verified: {user.is_verified} | Active: {user.is_active}")
                    print(f"   Created: {user.created_at}")
                    print("-" * 40)
                
                return users
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return []
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
        import traceback
        traceback.print_exc()
        return []

async def check_email_codes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email"""
    try:
        async with create_session() as session:
            result = await session.execute(text("""
                SELECT 
                    email,
                    code,
                    created_at,
                    expire_at
                FROM email_verification_code
                ORDER BY created_at DESC
                LIMIT 5
            """))
            
            codes = result.fetchall()
            
            if codes:
                print("\nüìß EMAIL VERIFICATION CODES:")
                print("=" * 50)
                for code in codes:
                    print(f"Email: {code.email}")
                    print(f"Code: {code.code}")
                    print(f"Created: {code.created_at}")
                    print(f"Expires: {code.expire_at}")
                    print("-" * 30)
            else:
                print("\nüìß Email verification codes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email codes: {e}")

async def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    users = await check_all_users()
    await check_email_codes()
    
    if users:
        print(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("\n‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 