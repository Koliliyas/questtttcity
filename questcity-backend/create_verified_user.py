#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import sys
from sqlalchemy import select, update
from core.user.services import UserService
from core.user.dto import UserCreateDTO, ProfileCreateDTO
from db.dependencies import create_session
from db.models.user import User
from core.di.container import create_container

async def create_verified_user():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email"""
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = "verified_user"
    email = "verified@test.com"
    password = "VerifiedPass123!"
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print(f"   Username: {username}")
    print(f"   Email: {email}")
    print(f"   Password: {password}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        async with create_container() as container:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            user_service = await container.get(UserService)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_dto = UserCreateDTO(
                username=username,
                password=password,
                email=email,
                first_name="Verified",
                last_name="User"
            )
            
            profile_dto = ProfileCreateDTO(avatar_url=None)
            
            print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            result = await user_service.register_user(
                user_dto=user_dto, 
                profile_dto=profile_dto
            )
            
            if result.is_err():
                error = result.err_value
                if "already exists" in str(error).lower():
                    print("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error}")
                    return False
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            async with create_session() as session:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_verified = True –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
                print("üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email...")
                await session.execute(
                    update(User)
                    .where(User.username == username)
                    .values(is_verified=True, is_active=True)
                )
                await session.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = await session.execute(
                    select(User.username, User.email, User.is_verified, User.is_active)
                    .where(User.username == username)
                )
                user = result.first()
            
            if user:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:")
                print(f"   Username: {user.username}")
                print(f"   Email: {user.email}")
                print(f"   Verified: {user.is_verified}")
                print(f"   Active: {user.is_active}")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    success = await create_verified_user()
    
    if success:
        print("\nüéâ –£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:")
        print("   Username: verified_user")
        print("   Password: VerifiedPass123!")
        print("\nüß™ –¢–µ—Å—Ç:")
        print("   curl -X POST http://localhost:8000/api/v1/auth/login \\")
        print("        -d 'login=verified_user&password=VerifiedPass123!'")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 