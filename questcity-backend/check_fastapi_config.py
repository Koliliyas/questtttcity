import asyncio
import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def check_fastapi_config():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FastAPI...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    print("  üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in os.environ.items():
        if 'database' in key.lower() or 'db' in key.lower() or 'postgres' in key.lower():
            print(f"    {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print("  üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    print(f"    DATABASE_DRIVER: {os.getenv('DATABASE_DRIVER', 'postgresql+asyncpg')}")
    print(f"    DATABASE_USERNAME: {os.getenv('DATABASE_USERNAME', 'postgres')}")
    print(f"    DATABASE_PASSWORD: {os.getenv('DATABASE_PASSWORD', 'postgres')}")
    print(f"    DATABASE_HOST: {os.getenv('DATABASE_HOST', 'localhost')}")
    print(f"    DATABASE_PORT: {os.getenv('DATABASE_PORT', '5432')}")
    print(f"    DATABASE_NAME: {os.getenv('DATABASE_NAME', 'questcity')}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    driver = os.getenv('DATABASE_DRIVER', 'postgresql+asyncpg')
    username = os.getenv('DATABASE_USERNAME', 'postgres')
    password = os.getenv('DATABASE_PASSWORD', 'postgres')
    host = os.getenv('DATABASE_HOST', 'localhost')
    port = os.getenv('DATABASE_PORT', '5432')
    name = os.getenv('DATABASE_NAME', 'questcity')
    
    url = f"{driver}://{username}:{password}@{host}:{port}/{name}"
    print(f"  üîó URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("  üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        engine = create_async_engine(url, echo=True)
        
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession, 
            expire_on_commit=False
        )
        
        async with async_session() as session:
            print("    ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
            print("    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É...")
            result = await session.execute(text("SELECT current_schema()"))
            schema = result.scalar()
            print(f"      –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞: {schema}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity
            print("    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É activity...")
            result = await session.execute(text("SELECT * FROM activity WHERE id = 1"))
            row = result.fetchone()
            print(f"      –ó–∞–ø–∏—Å—å —Å ID = 1: {row}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ
            print("    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ...")
            result = await session.execute(text("""
                SELECT table_name, table_schema 
                FROM information_schema.tables 
                WHERE table_schema = current_schema()
                ORDER BY table_name
            """))
            tables = result.fetchall()
            print(f"      –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ {schema}: {[t[0] for t in tables]}")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é FastAPI...")
    await check_fastapi_config()

if __name__ == "__main__":
    asyncio.run(main())
















