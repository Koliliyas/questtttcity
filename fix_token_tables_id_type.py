#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ id –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å INTEGER –Ω–∞ UUID
"""
import psycopg2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'sslmode': 'disable'
}

def fix_token_tables_id_type():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ id –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ê ID –í –¢–ê–ë–õ–ò–¶–ê–• –¢–û–ö–ï–ù–û–í")
    print("=" * 80)
    
    tables_to_fix = ['refresh_token', 'reset_password_token', 'email_verification_code']
    
    try:
        conn = psycopg2.connect(**SERVER_DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
        
        for table_name in tables_to_fix:
            print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø id
            cursor.execute(f"""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = '{table_name}' AND column_name = 'id'
            """)
            column_info = cursor.fetchone()
            
            if column_info and column_info[1] == 'integer':
                print(f"  üìã –¢–µ–∫—É—â–∏–π —Ç–∏–ø id: {column_info[1]}")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å UUID
                temp_table = f"{table_name}_temp"
                cursor.execute(f"""
                    CREATE TABLE {temp_table} AS 
                    SELECT * FROM {table_name} LIMIT 0
                """)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f"""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = '{table_name}'
                    ORDER BY ordinal_position
                """)
                columns = cursor.fetchall()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å UUID id
                create_columns = []
                for col in columns:
                    if col[0] == 'id':
                        create_columns.append('id UUID PRIMARY KEY DEFAULT gen_random_uuid()')
                    else:
                        nullable = "NOT NULL" if col[2] == "NO" else ""
                        default = f"DEFAULT {col[3]}" if col[3] else ""
                        create_columns.append(f"{col[0]} {col[1]} {nullable} {default}".strip())
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                cursor.execute(f"DROP TABLE {temp_table}")
                cursor.execute(f"DROP TABLE {table_name}")
                cursor.execute(f"CREATE TABLE {table_name} ({', '.join(create_columns)})")
                
                print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            else:
                print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø id")
        
        cursor.close()
        conn.close()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    fix_token_tables_id_type()
