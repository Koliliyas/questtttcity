#!/usr/bin/env python3
"""
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import psycopg2
import bcrypt

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SERVER_DB_CONFIG = {
    'host': '7da2c0adf39345ca39269f40.twc1.net',
    'port': 5432,
    'database': 'default_db',
    'user': 'gen_user',
    'password': '|dls1z:N7#v>vr',
    'sslmode': 'disable'
}

def hash_password(password):
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt"""
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed.decode('utf-8')

def restore_correct_database_structure():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    try:
        conn = psycopg2.connect(**SERVER_DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏
        print("\nüîß –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        tables_to_drop = [
            'review_response',
            'review', 
            'refresh_token',
            'reset_password_token',
            'email_verification_code',
            'alembic_version'
        ]
        
        for table in tables_to_drop:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —É–¥–∞–ª–µ–Ω–∞")
        
        # 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user —Å UUID id
        print("\nüîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user —Å UUID id...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å UUID id
        cursor.execute("""
            CREATE TABLE user_temp (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                email VARCHAR(255) NOT NULL UNIQUE,
                username VARCHAR(255) NOT NULL UNIQUE,
                password VARCHAR(255) NOT NULL,
                is_active BOOLEAN DEFAULT true,
                is_superuser BOOLEAN DEFAULT false,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                profile_id INTEGER REFERENCES profile(id),
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                full_name VARCHAR(255),
                role VARCHAR(50) DEFAULT 'user',
                is_verified BOOLEAN DEFAULT false,
                can_edit_quests BOOLEAN DEFAULT false,
                can_lock_users BOOLEAN DEFAULT false
            )
        """)
        print("  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ user —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            INSERT INTO user_temp (
                email, username, password, is_active, is_superuser, 
                created_at, updated_at, profile_id, first_name, last_name, 
                full_name, role, is_verified, can_edit_quests, can_lock_users
            ) SELECT 
                email, username, password, is_active, is_superuser, 
                created_at, updated_at, profile_id, first_name, last_name, 
                full_name, role, is_verified, can_edit_quests, can_lock_users
            FROM "user"
        """)
        print("  ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute('DROP TABLE "user"')
        cursor.execute('ALTER TABLE user_temp RENAME TO "user"')
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ user –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å UUID id")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤ —Å UUID user_id
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç–æ–∫–µ–Ω–æ–≤ —Å UUID user_id...")
        
        # refresh_token
        cursor.execute("""
            CREATE TABLE refresh_token (
                id SERIAL PRIMARY KEY,
                token VARCHAR(255) NOT NULL,
                user_id UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
                expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ refresh_token —Å–æ–∑–¥–∞–Ω–∞")
        
        # reset_password_token
        cursor.execute("""
            CREATE TABLE reset_password_token (
                id SERIAL PRIMARY KEY,
                token VARCHAR(255) NOT NULL,
                user_id UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
                expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ reset_password_token —Å–æ–∑–¥–∞–Ω–∞")
        
        # email_verification_code
        cursor.execute("""
            CREATE TABLE email_verification_code (
                code INTEGER NOT NULL,
                email VARCHAR(30) NOT NULL,
                optional_data JSON,
                created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT TIMEZONE('utc', now()) NOT NULL,
                CONSTRAINT pk_email_verification_code PRIMARY KEY (code, email)
            )
        """)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ email_verification_code —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã review —Å UUID user_id
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü review —Å UUID user_id...")
        
        # review
        cursor.execute("""
            CREATE TABLE review (
                id SERIAL PRIMARY KEY,
                rating INTEGER NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                quest_id INTEGER NOT NULL REFERENCES quest(id) ON DELETE CASCADE,
                text TEXT NOT NULL,
                owner_id UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
                user_id UUID REFERENCES "user"(id) ON DELETE CASCADE
            )
        """)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ review —Å–æ–∑–¥–∞–Ω–∞")
        
        # review_response
        cursor.execute("""
            CREATE TABLE review_response (
                id SERIAL PRIMARY KEY,
                text TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                review_id INTEGER REFERENCES review(id) ON DELETE CASCADE,
                user_id UUID REFERENCES "user"(id) ON DELETE CASCADE
            )
        """)
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ review_response —Å–æ–∑–¥–∞–Ω–∞")
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
        print("\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞...")
        admin_password = hash_password("admin123")
        cursor.execute("""
            UPDATE "user" SET 
                password = %s,
                role = 'admin',
                is_verified = true,
                can_edit_quests = true,
                can_lock_users = true,
                first_name = 'Admin',
                last_name = 'User',
                full_name = 'Admin User'
            WHERE email = 'admin@questcity.com'
        """, (admin_password,))
        print("  ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É alembic_version
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã alembic_version...")
        cursor.execute("""
            CREATE TABLE alembic_version (
                version_num VARCHAR(32) NOT NULL,
                CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
            )
        """)
        cursor.execute("INSERT INTO alembic_version (version_num) VALUES ('11cae1179d5e')")
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ alembic_version —Å–æ–∑–¥–∞–Ω–∞")
        
        cursor.close()
        conn.close()
        print("\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    restore_correct_database_structure()
