#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import psycopg2
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'questcity',
    'user': 'postgres',
    'password': 'postgres'
}

def find_user_tables():
    """–ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    print("=" * 80)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**LOCAL_DB_CONFIG)
        cursor = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ!")

        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        print("\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ 'user':")
        cursor.execute("""
            SELECT table_schema, table_name 
            FROM information_schema.tables 
            WHERE table_type = 'BASE TABLE' 
            AND (table_name ILIKE '%user%' OR table_name ILIKE '%auth%' OR table_name ILIKE '%login%')
            ORDER BY table_schema, table_name
        """)
        user_tables = cursor.fetchall()
        
        for schema, table in user_tables:
            print(f"  - {schema}.{table}")

        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public
        print("\nüîç –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public:")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        public_tables = cursor.fetchall()
        
        for table in public_tables:
            table_name = table[0]
            print(f"  - {table_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        print("\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:")
        for table in public_tables:
            table_name = table[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            cursor.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_schema = 'public' AND table_name = %s
                AND (column_name ILIKE '%%user%%' OR column_name ILIKE '%%email%%' OR 
                     column_name ILIKE '%%password%%' OR column_name ILIKE '%%login%%' OR
                     column_name ILIKE '%%username%%' OR column_name ILIKE '%%auth%%')
                ORDER BY ordinal_position
            """, (table_name,))
            
            user_columns = cursor.fetchall()
            if user_columns:
                print(f"  üìã –¢–∞–±–ª–∏—Ü–∞ {table_name}:")
                for col in user_columns:
                    print(f"    - {col[0]}: {col[1]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–∞–±–ª–∏—Ü—É profile –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã profile:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_schema = 'public' AND table_name = 'profile'
            ORDER BY ordinal_position
        """)
        profile_columns = cursor.fetchall()
        
        if profile_columns:
            print(f"  üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã profile:")
            for col in profile_columns:
                default = col[3] if col[3] else 'NULL'
                print(f"    - {col[0]}: {col[1]} (nullable: {col[2]}, default: {default})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ profile
            cursor.execute("SELECT * FROM profile")
            profile_data = cursor.fetchall()
            print(f"  üìÑ –î–∞–Ω–Ω—ã–µ –≤ profile: {profile_data}")

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏ email –∏–ª–∏ username
        print(f"\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –ø–æ–ª—è–º–∏ email –∏–ª–∏ username:")
        cursor.execute("""
            SELECT DISTINCT table_name 
            FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND (column_name = 'email' OR column_name = 'username')
            ORDER BY table_name
        """)
        email_username_tables = cursor.fetchall()
        
        for table in email_username_tables:
            table_name = table[0]
            print(f"  - {table_name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç—Ç–∏—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_schema = 'public' AND table_name = %s
                ORDER BY ordinal_position
            """, (table_name,))
            
            columns = cursor.fetchall()
            print(f"    üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            for col in columns:
                print(f"      - {col[0]}: {col[1]} (nullable: {col[2]})")

        cursor.close()
        conn.close()
        
        print("\n" + "=" * 80)
        print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    success = find_user_tables()
    
    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")

if __name__ == "__main__":
    main()
