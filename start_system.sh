#!/bin/bash

# QuestCity - –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–∫–µ–Ω–¥ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ QuestCity Development System"
echo "======================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    if ! command -v flutter &> /dev/null; then
        log_error "Flutter –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        log_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    log_success "–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ environment –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
setup_frontend_env() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ environment –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    
    cd questcity-frontend
    
    # –ö–æ–ø–∏—Ä—É–µ–º development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if [ -f ".env.development" ]; then
        cp .env.development .env
        log_success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω .env.development -> .env"
    else
        log_warning ".env.development –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    cd ..
}

# –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞
start_backend() {
    log_info "–ó–∞–ø—É—Å–∫ QuestCity Backend..."
    
    cd questcity-backend/main
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f ".env" ]; then
        log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ questcity-backend/main/"
        log_info "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫–µ–Ω–¥ —á–µ—Ä–µ–∑ Poetry –∏–ª–∏ Docker
    if [ -f "pyproject.toml" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Poetry..."
        if ! command -v poetry &> /dev/null; then
            log_error "Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Poetry: curl -sSL https://install.python-poetry.org | python3 -"
            exit 1
        fi
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        poetry install
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        log_info "–ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞ –Ω–∞ http://localhost:8000"
        poetry run python3 main.py &
        BACKEND_PID=$!
        log_success "Backend –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
        
    elif [ -f "docker-compose.yml" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose..."
        docker-compose up -d
        log_success "Backend –∑–∞–ø—É—â–µ–Ω –≤ Docker"
    else
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–µ–Ω–¥–∞ (Poetry –∏–ª–∏ Docker)"
        exit 1
    fi
    
    cd ../..
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
prepare_frontend() {
    log_info "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QuestCity Frontend..."
    
    cd questcity-frontend
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    flutter pub get
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ -f "pubspec.yaml" ] && grep -q "build_runner" pubspec.yaml; then
        log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞..."
        flutter packages pub run build_runner build --delete-conflicting-outputs
    fi
    
    log_success "Frontend –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
    log_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cd questcity-frontend && flutter run"
    
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
test_connection() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–µ–∫–µ–Ω–¥–æ–º..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–µ–Ω–¥–∞
    sleep 5
    
    if curl -s http://localhost:8000/api/v1/health >/dev/null; then
        log_success "‚úÖ –ë–µ–∫–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ http://localhost:8000"
    else
        log_warning "‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
show_instructions() {
    echo ""
    echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!"
    echo "=========================="
    echo ""
    echo "üì° Backend API: http://localhost:8000/api/v1/"
    echo "üìö API Docs: http://localhost:8000/api/docs"
    echo "üîß Health Check: http://localhost:8000/api/v1/health"
    echo ""
    echo "üì± –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:"
    echo "   cd questcity-frontend"
    echo "   flutter run"
    echo ""
    echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ–∫–µ–Ω–¥–∞:"
    if [ ! -z "$BACKEND_PID" ]; then
        echo "   kill $BACKEND_PID"
    else
        echo "   docker-compose down (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Docker)"
    fi
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_requirements
    setup_frontend_env
    start_backend
    prepare_frontend
    test_connection
    show_instructions
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
cleanup() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    exit 0
}

trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main

# –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –¥–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
if [ ! -z "$BACKEND_PID" ]; then
    log_info "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."
    wait $BACKEND_PID
fi 