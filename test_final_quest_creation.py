#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
"""
import requests
import json

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://questcity.ru/api/v1"

def test_final_quest_creation():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    print("üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞")
    print("=" * 80)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
    print("\nüìã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞")
    login_data = {
        "login": "admin@questcity.com",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", data=login_data, timeout=10)
        print(f"  üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            access_token = result.get('accessToken')
            if access_token:
                print("  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                print("  ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            return
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ enum
    quest_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç",  # –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
        "image": "https://example.com/image.jpg",
        "credits": {
            "auto": False,
            "cost": 100,
            "reward": 500
        },
        "main_preferences": {
            "category_id": 1,
            "vehicle_id": 1,
            "place_id": 1,
            "group": 2,  # 1, 2, 3 –∏–ª–∏ 4
            "timeframe": 1,  # 1, 3, 10 –∏–ª–∏ 24
            "level": "Easy",  # "Easy", "Medium" –∏–ª–∏ "Hard"
            "mileage": "5-10",  # "5-10", "10-30", "30-100" –∏–ª–∏ ">100"
            "types": [],
            "places": [],
            "vehicles": [],
            "tools": []
        },
        "mentor_preference": "",
        "merch": [],
        "points": []
    }
    
    print(f"  üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(json.dumps(quest_data, indent=2, ensure_ascii=False))
    
    try:
        response = requests.post(f"{BASE_URL}/quests/admin/create", json=quest_data, headers=headers, timeout=10)
        print(f"  üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("  ‚úÖ –ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"  üìÑ –û—Ç–≤–µ—Ç: {result}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞: {response.text}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    test_final_quest_creation()
    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
